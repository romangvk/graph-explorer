{"version":3,"sources":["components/GraphDisplay.js","components/NodeEditor.js","components/LinkEditor.js","components/Link.js","util/graph.js","components/FloatingPanel.js","App.js","reportWebVitals.js","index.js"],"names":["radius","GraphDisplay","_ref","nodes","links","onClickNode","display","useRef","force","boundX","x","container","current","getBoundingClientRect","Math","max","min","width","boundY","y","height","useEffect","d3","strength","alphaDecay","svg","on","selectAll","attr","d","source","target","resize","alpha","restart","window","addEventListener","link","data","id","exit","transition","ease","style","duration","remove","enter","insert","node","g","append","call","event","active","alphaTarget","fx","fy","merge","select","text","v","e","react_default","a","createElement","ref","NodeEditor","change","action","enterAction","value","icon","inputRef","className","placeholder","type","onKeyDown","key","onChange","index_es","fixedWidth","onClick","LinkEditor","sourceRef","targetRef","defaultValue","disabled","hidden","map","i","faArrowRight","parseInt","Link","addNode","_len","arguments","length","Array","_key","Object","objectSpread","concat","toConsumableArray","n","contains","_step2","_iterator2","_createForOfIteratorHelper","s","done","err","f","addLink","_step3","_arguments","_iterator3","_loop","undefined","reduce","acc","cur","push","FloatingPanel","title","children","top","left","_useState","useState","_useState2","slicedToArray","expand","toggleExpand","cjs_default","faMinus","faPlus","App","G","graph","setGraph","nodeRefs","addNodeRef","_useState3","_useState4","addV","setAddV","components_FloatingPanel","components_NodeEditor","console","log","old","focus","el","_step","index","_iterator","_len2","_key2","_i","_id","filter","scrollIntoView","blur","faTimes","components_LinkEditor","sourceV","targetV","sourceId","targetId","components_Link","components_GraphDisplay","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.2a3b4fdd.chunk.js","sourcesContent":["import './GraphDisplay.css';\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nlet radius = 4;\n\nfunction GraphDisplay({ nodes, links, onClickNode }) {\n    const display = useRef(null);\n    const force = useRef(null);\n\n    // Bounding box\n    const boundX = (x) => {\n        let container = display.current.getBoundingClientRect();\n        return Math.max(Math.min(container.width - radius, x), 0 + radius);\n    }\n    const boundY = (y) => {\n        let container = display.current.getBoundingClientRect();\n        return Math.max(Math.min(container.height - radius, y), 0 + radius);\n    }\n\n    // Only runs once\n    useEffect(() => {\n        // Create force\n        force.current = d3.forceSimulation()\n            .force(\"gravity\", d3.forceManyBody())\n            .force(\"links\", d3.forceLink().strength(0.05))\n            .force(\"centerX\", d3.forceX().strength(0.005))\n            .force(\"centerY\", d3.forceY().strength(0.005))\n            .alphaDecay(0);\n\n        // Svg reference\n        let svg = d3.select(display.current);\n\n        // Move nodes and links every tick\n        force.current.on(\"tick\", function () {\n            svg.selectAll(\".link\")\n                .attr(\"x1\", (d) => { return boundX(d.source.x); })\n                .attr(\"y1\", (d) => { return boundY(d.source.y); })\n                .attr(\"x2\", (d) => { return boundX(d.target.x); })\n                .attr(\"y2\", (d) => { return boundY(d.target.y); });\n\n            svg.selectAll(\".node\").attr(\"transform\", (d) => {\n                return \"translate(\" + boundX(d.x) + \",\" + boundY(d.y) + \")\";\n            });\n        });\n\n        // Recalculate centering forces on resize\n        const resize = () => {\n            let container = display.current.getBoundingClientRect();\n            force.current.force(\"centerX\").x(container.width / 2);\n            force.current.force(\"centerY\").y(container.height / 2);\n            force.current.alpha(1).restart();\n        }\n        window.addEventListener(\"resize\", () => {\n            resize();\n        });\n        resize();\n    }, []);\n\n    // Runs when nodes or links change\n    useEffect(() => {\n        // Svg reference\n        let svg = d3.select(display.current);\n\n        // Draw links\n        let link = svg.selectAll(\".link\").data(links, (d) => d.id);\n\n        // Animate removed links\n        link.exit().transition().ease(d3.easeExpOut).style(\"opacity\", 0).duration(500).remove();\n\n        // Create new links\n        link.enter().insert(\"line\", \":first-child\").attr(\"class\", \"link\");\n\n        // Draw nodes\n        let node = svg.selectAll(\".node\").data(nodes, (d) => d.id);\n\n        // Animate removed nodes\n        node.exit().transition().ease(d3.easeExpOut).style(\"opacity\", 0).duration(500).remove();\n\n        // Create new nodes\n        let g = node.enter().append(\"g\")\n            .attr(\"class\", \"node\")\n            .call(d3.drag()\n                .on(\"start\", (event, d) => {\n                    if (!event.active) force.current.alphaTarget(0.3).restart();\n                    d.fx = d.x;\n                    d.fy = d.y;\n                })\n                .on(\"drag\", (event, d) => {\n                    d.fx = event.x;\n                    d.fy = event.y;\n                })\n                .on(\"end\", (event, d) => {\n                    if (!event.active) force.current.alphaTarget(0);\n                    d.fx = null;\n                    d.fy = null;\n                }));\n\n        // Draw circle\n        g.append(\"circle\").attr(\"r\", radius);\n\n        // Draw text\n        g.append(\"text\")\n            .attr(\"dx\", \"1em\")\n            .attr(\"dy\", \".35em\")\n            .merge(node.select(\"text\"))\n            .text((d) => d.v);\n\n        // Reinitialize force\n        force.current.nodes(nodes);\n        force.current.force(\"links\").links(links);\n    }, [nodes, links]);\n\n    // Runs when onClickNode changes\n    useEffect(() => {\n        d3.selectAll(\"g\").on(\"click\", (e, d) => {\n            onClickNode(d);\n        })\n    }, [onClickNode])\n    return (\n        <svg ref={display} width=\"100%\" height=\"100%\" />\n    );\n}\nexport default GraphDisplay;","import './NodeEditor.css';\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nfunction NodeEditor({ change, action, enterAction, value, icon, inputRef }) {\n    const enter = (event) => {\n        if (event.key === 'Enter') {\n            enterAction ? enterAction() : action();\n        }\n    }\n    return (\n        <div className=\"node\">\n            <input\n                placeholder=\"value\"\n                type=\"text\"\n                ref={inputRef}\n                value={value}\n                onKeyDown={enter}\n                onChange={(e) => change(e.target.value)} />\n            <div className=\"action\"><FontAwesomeIcon icon={icon} fixedWidth onClick={() => action()} /></div>\n        </div>\n    );\n}\nexport default NodeEditor;","import './LinkEditor.css';\nimport React, { useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\n\nfunction LinkEditor({ action, icon, nodes }) {\n    const sourceRef = useRef();\n    const targetRef = useRef();\n    return (\n        <div className=\"link\">\n            <select ref={sourceRef} className=\"link\"\n                defaultValue=\"source\">\n                <option disabled hidden>source</option>\n                {nodes && nodes.map((node, i) => <option key={i} value={node.id}>{node.v}</option>)}\n            </select>\n            <FontAwesomeIcon icon={faArrowRight} fixedWidth />\n            <select ref={targetRef} className=\"link\"\n                defaultValue=\"target\">\n                <option disabled hidden>target</option>\n                {nodes && nodes.map((node, i) => <option key={i} value={node.id}>{node.v}</option>)}\n            </select>\n            <div className=\"action\"><FontAwesomeIcon icon={icon} fixedWidth\n                onClick={() => action(parseInt(sourceRef.current.value, 10), parseInt(targetRef.current.value, 10))} />\n            </div>\n        </div>\n    );\n}\nexport default LinkEditor;","import './Link.css';\nimport React, { useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\n\nfunction Link({ source, target, icon, action }) {\n    const sourceRef = useRef();\n    const targetRef = useRef();\n    return (\n        <div className=\"link\">\n            <div ref={sourceRef} className=\"link-value\">{source}</div>\n            <FontAwesomeIcon icon={faArrowRight} fixedWidth />\n            <div ref={targetRef} className=\"link-value\">{target}</div>\n            <div className=\"action\"><FontAwesomeIcon icon={icon} fixedWidth onClick={() => action()} />\n            </div>\n        </div>\n    );\n}\nexport default Link;","/**\n* Creates a new graph object\n* @return {Object} A new graph\n*/\nexport function create() {\n    // Return a new graph with no nodes or links\n    return { nodes: [], links: [], id: 0, n: 0 };\n}\n/**\n* Add a node to a graph\n* @param  {Object} g     The graph\n* @param  {...any} value The value for the new node\n* @return {Object}       A new graph containing the new node\n*/\nexport function addNode(g, ...value) {\n    // Create new nodes for each value\n    let id = g.id;\n    let nodes = value.map((v) => { return { v: v, id: id++ } });\n\n    // Return a new graph with the new nodes in g.nodes\n    return { ...g, nodes: [...g.nodes, ...nodes], id, n: g.n + nodes.length };\n}\n\n/**\n* Update a node's value\n* @param  {Object} g     The graph\n* @param  {number} id    The id of the node to be updated\n* @param  {...any} value The value for the node\n* @return {Object}       A new graph containing the updated node\n*/\nexport function updateNode(g, id, value) {\n    let nodes = [...g.nodes];\n    let index = 0;\n    for (let node of nodes) {\n        if (node.id === id) {\n            index = node.index;\n            break;\n        }\n    }\n    nodes[index].v = value\n    return { ...g, nodes };\n}\n/**\n* Check whether or not a node with a given value exists in a graph\n* @param  {Object} g     The graph\n* @param  {...any} value The value\n* @return {boolean}      Whether or not the graph vontains a node with the given value\n*/\nexport function contains(g, value) {\n    let nodes = [...g.nodes];\n    for (let node of nodes) {\n        if (value === node.v) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n* Remove a node from a graph\n* @param  {Object} g     The graph\n* @param  {...number} id The id of the node to be removed\n* @return {Object}       A new graph that does not contain the node or any links with the node\n*/\nexport function removeNode(g, ...id) {\n    // Put ids in a map for constant lookup\n    let map = {}\n    for (const i of id)\n        map[i] = true;\n\n    // Remove the nodes from the nodes list\n    let nodes = g.nodes.filter((node) => !map[node.id]);\n\n    // Remove any links with the node\n    let links = g.links.filter((link) => !map[link.source.id] && !map[link.target.id] && !map[link.source] && !map[link.target]);\n\n    // Return a new graph with the updated node and link list\n    return { ...g, nodes, links, n: nodes.length };\n}\n/**\n* Add a link to a graph\n* @param  {Object} g       The graph\n* @param  {...number} link The source, target pair to be added\n* @return {Object}         A new graph containing a link between source and target\n*/\nexport function addLink(g, ...link) {\n    // Put ids in a map for constant lookup\n    let map = {}\n    for (const node of g.nodes) {\n        map[node.id] = true;\n    }\n\n    // Add valid links to a list\n    let links = []\n    for (let i = 1; i < link.length; i += 2) {\n        let source = link[i - 1];\n        let target = link[i];\n\n        // Check that the link is between two valid nodes\n        if (map[source] && map[target]) {\n            // Check that the link doesn't already exist\n            if (g.links.reduce((acc, cur) => {\n                return acc &&\n                    !(cur.source.id === source && cur.target.id === target) &&\n                    !(cur.source === source && cur.target === target);\n            }, true)) {\n                // Add the link to the list\n                links.push({ source, target });\n            }\n        }\n    }\n    // Return a new graph with the new links in g.links\n    return { ...g, links: [...g.links, ...links] };\n}\n/**\n* Remove a link from a graph\n* @param  {Object} g       The graph\n* @param  {...number} link The source, target pair to be removed\n* @return {Object}         A new graph that does not contain a link between source and target\n*/\nexport function removeLink(g, ...link) {\n    // Put all links in a map for constant lookup\n    let map = {};\n    for (let i = 1; i < link.length; i += 2) {\n        let source = link[i - 1];\n        let target = link[i];\n        if (!map[source])\n            map[source] = {};\n        map[source][target] = true;\n    }\n\n    // Remove all links\n    let links = g.links.filter((link) =>\n        !(map[link.source.id] && map[link.source.id][link.target.id])\n        && !(map[link.source] && map[link.source][link.target])\n    );\n\n    // Return a new graph with the new links in g.links\n    return { ...g, links };\n}","import './FloatingPanel.css';\nimport React, { useState } from 'react';\nimport Draggable from 'react-draggable';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons';\n\nfunction FloatingPanel({ title, children, top, left }) {\n    const [expand, toggleExpand] = useState(true);\n    return (\n        <Draggable>\n            <div className={`floating-panel ${expand ? \"floating-panel-max\" : \"floating-panel-min\"}`} style={{ top, left }}>\n                <div className=\"floating-panel-title\">\n                    <b>{title}</b>\n                    <div className=\"action\">\n                        <FontAwesomeIcon icon={expand ? faMinus : faPlus} fixedWidth onClick={() => {\n                            toggleExpand(!expand);\n                        }} />\n                    </div>\n                </div>\n                {expand ? <div className=\"floating-panel-content\">\n                    {children}\n                </div> : null}\n            </div>\n        </Draggable>\n    );\n}\nexport default FloatingPanel;","import './App.css';\nimport React, { useRef, useState } from 'react';\nimport GraphDisplay from './components/GraphDisplay';\nimport NodeEditor from './components/NodeEditor';\nimport LinkEditor from './components/LinkEditor';\nimport Link from './components/Link';\nimport * as G from './util/graph';\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons'\nimport FloatingPanel from './components/FloatingPanel';\n\nfunction App() {\n  const [graph, setGraph] = useState(G.addLink(G.addNode(G.create(), 0, 1, 2), 1, 2, 2, 0));\n  const nodeRefs = useRef({})\n  const addNodeRef = useRef();\n  const [addV, setAddV] = useState(\"\");\n\n  return (\n    <div className=\"App\">\n      <FloatingPanel title=\"Nodes\" top=\"1vh\" left=\"1em\">\n        <NodeEditor value={addV} inputRef={addNodeRef}\n          change={(v) => setAddV(v)}\n          action={() => {\n            if (addV === \"\" || G.contains(graph, addV)) {\n              console.log(\"Must be a new value\");\n            } else {\n              setGraph((old) => G.addNode(old, addV));\n              setAddV(\"\");\n            }\n            addNodeRef.current.focus();\n          }}\n          icon={faPlus} />\n        <hr />\n        <div className=\"list\">\n          {graph.nodes.map((node, i) => {\n            return (\n              <NodeEditor key={i} value={node.v} inputRef={(el) => (nodeRefs.current[node.id] = el)}\n                change={(v) => {\n                  G.contains(graph, v) ?\n                    setGraph((old) => { return { ...old } })\n                    :\n                    setGraph((old) => G.updateNode(old, node.id, v))\n                }}\n                action={() => setGraph((old) => G.removeNode(old, node.id))}\n                enterAction={() => {\n                  if (i + 1 < graph.nodes.length) {\n                    nodeRefs.current[graph.nodes[i + 1].id].focus();\n                    nodeRefs.current[graph.nodes[i + 1].id].select();\n                    nodeRefs.current[graph.nodes[i + 1].id].scrollIntoView();\n                  } else {\n                    nodeRefs.current[node.id].blur();\n                  }\n                }}\n                icon={faTimes} />\n            );\n          })}\n        </div>\n      </FloatingPanel>\n      <FloatingPanel title=\"Links\" top=\"51vh\" left=\"1em\">\n        <LinkEditor nodes={graph.nodes}\n          icon={faPlus}\n          action={(source, target) => {\n            setGraph((old) => G.addLink(old, source, target));\n          }} />\n        <hr />\n        <div className=\"list\">\n          {graph.links.map((link, i) => {\n            let sourceV = link.source.v != null ? link.source.v : link.source;\n            let targetV = link.target.v != null ? link.target.v : link.target;\n            let sourceId = link.source.id != null ? link.source.id : link.source;\n            let targetId = link.target.id != null ? link.target.id : link.target;\n            return (\n              <Link key={i}\n                source={sourceV}\n                target={targetV}\n                action={() => { setGraph((old) => G.removeLink(old, sourceId, targetId)) }}\n                icon={faTimes} />\n            );\n          })}\n        </div>\n      </FloatingPanel>\n      <GraphDisplay nodes={graph.nodes} links={graph.links}\n        onClickNode={(d) => {\n          nodeRefs.current[d.id].focus();\n          nodeRefs.current[d.id].select();\n          nodeRefs.current[d.id].scrollIntoView();\n        }}\n      />\n    </div >\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}