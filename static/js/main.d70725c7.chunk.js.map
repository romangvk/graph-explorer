{"version":3,"sources":["components/GraphDisplay.js","components/NodeEditor.js","components/LinkEditor.js","components/Link.js","components/Algorithm.js","util/graph.js","components/FloatingPanel.js","util/algorithms.js","App.js","reportWebVitals.js","index.js"],"names":["GraphDisplay","_ref","nodes","links","onClickNode","nodeSize","linkWidth","linkDistance","_ref$expands","expands","_ref$path","path","display","useRef","force","boundX","x","container","current","getBoundingClientRect","Math","max","min","width","boundY","y","height","useEffect","d3","strength","id","d","alphaDecay","svg","on","selectAll","attr","source","target","resize","alpha","restart","window","addEventListener","link","data","exit","transition","ease","style","duration","remove","enter","insert","concat","node","g","append","call","event","active","alphaTarget","fx","fy","fixed","merge","select","text","v","distance","e","forEach","prev","react_default","a","createElement","ref","markerWidth","markerHeight","refX","refY","orient","points","NodeEditor","change","action","enterAction","value","icon","inputRef","className","placeholder","type","onKeyDown","key","onChange","index_es","fixedWidth","onClick","LinkEditor","sourceRef","targetRef","defaultValue","disabled","hidden","map","i","faArrowRight","parseInt","Link","Algorithm","name","args","_useState","useState","_useState2","Object","slicedToArray","argValues","setArgs","arg","oldValues","newValues","toConsumableArray","j","apply","addNode","_len","arguments","length","Array","_key","objectSpread","n","getNode","find","contains","_step2","_iterator2","_createForOfIteratorHelper","s","done","err","f","addLink","_step3","_arguments","_iterator3","_loop","undefined","reduce","acc","cur","push","FloatingPanel","title","children","top","left","bottom","right","expand","toggleExpand","cjs_default","handle","faMinus","faPlus","getAdjacencyList","graph","list","example","G","App","setGraph","nodeRefs","addNodeRef","_useState3","iterationSpeed","_useState4","options","setOptions","_useState5","_useState6","search","setSearch","_useState7","_useState8","setDisabled","animateSearch","results","expandi","pathi","animation","setInterval","console","log","setTimeout","clearInterval","components_FloatingPanel","components_NodeEditor","old","focus","el","_step","index","_iterator","_len2","_key2","_i","_id","filter","scrollIntoView","blur","faTimes","components_LinkEditor","sourceId","targetId","sourceV","targetV","components_Link","l","step","onInput","components_Algorithm","start","goal","isNaN","adjacencyList","trace","Map","set","queue","currentNode","shift","algorithms_createForOfIteratorHelper","has","get","unshift","A","stack","pop","components_GraphDisplay","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d70725c7.chunk.js","sourcesContent":["import './GraphDisplay.css';\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nfunction GraphDisplay({ nodes, links, onClickNode, nodeSize, linkWidth, linkDistance, expands = [], path = [] }) {\n    const display = useRef(null);\n    const force = useRef(null);\n\n    // Bounding box\n    const boundX = (x) => {\n        let container = display.current.getBoundingClientRect();\n        return Math.max(Math.min(container.width, x), 0);\n    }\n    const boundY = (y) => {\n        let container = display.current.getBoundingClientRect();\n        return Math.max(Math.min(container.height, y), 0);\n    }\n\n    // Only runs once\n    useEffect(() => {\n        // Create force\n        force.current = d3.forceSimulation()\n            .force(\"gravity\", d3.forceManyBody())\n            .force(\"links\", d3.forceLink().strength(0.05).id((d) => d.id))\n            .force(\"centerX\", d3.forceX().strength(0.005))\n            .force(\"centerY\", d3.forceY().strength(0.005))\n            .alphaDecay(0);\n\n        // Svg reference\n        let svg = d3.select(display.current);\n\n        // Move nodes and links every tick\n        force.current.on(\"tick\", function () {\n            svg.selectAll(\"line\")\n                .attr(\"x1\", (d) => { return boundX(d.source.x); })\n                .attr(\"y1\", (d) => { return boundY(d.source.y); })\n                .attr(\"x2\", (d) => { return boundX(d.target.x); })\n                .attr(\"y2\", (d) => { return boundY(d.target.y); });\n\n            svg.selectAll(\".node\").attr(\"transform\", (d) => {\n                return \"translate(\" + boundX(d.x) + \",\" + boundY(d.y) + \")\";\n            });\n        });\n\n        // Recalculate centering forces on resize\n        const resize = () => {\n            let container = display.current.getBoundingClientRect();\n            force.current.force(\"centerX\").x(container.width / 2);\n            force.current.force(\"centerY\").y(container.height / 2);\n            force.current.alpha(1).restart();\n        }\n        window.addEventListener(\"resize\", () => {\n            resize();\n        });\n        resize();\n    }, []);\n\n    // Runs when nodes or links change\n    useEffect(() => {\n        // Svg reference\n        let svg = d3.select(display.current);\n\n        // Draw links\n        let link = svg.selectAll(\"line\").data(links, (d) => d.id);\n\n        // Animate removed links\n        link.exit().transition().ease(d3.easeExpOut).style(\"opacity\", 0).duration(500).remove();\n\n        // Create new links\n        link.enter().insert(\"line\", \":first-child\")\n            .attr(\"stroke-width\", linkWidth || 2)\n            .attr(\"marker-end\", \"url(#arrow)\")\n            .attr(\"id\", (d) => `link-${d.source.id != null ? d.source.id : d.source}-${d.target.id != null ? d.target.id : d.target}`);\n\n        // Draw nodes\n        let node = svg.selectAll(\".node\").data(nodes, (d) => d.id);\n\n        // Animate removed nodes\n        node.exit().transition().ease(d3.easeExpOut).style(\"opacity\", 0).duration(500).remove();\n\n        // Create new nodes\n        let g = node.enter().append(\"g\")\n            .attr(\"class\", \"node\")\n            .attr(\"id\", (d) => `node-${d.id}`)\n            .call(d3.drag()\n                .on(\"start\", (event, d) => {\n                    if (!event.active) force.current.alphaTarget(0.3).restart();\n                    d.fx = d.x;\n                    d.fy = d.y;\n                })\n                .on(\"drag\", (event, d) => {\n                    d.fx = event.x;\n                    d.fy = event.y;\n                })\n                .on(\"end\", (event, d) => {\n                    if (!event.active) force.current.alphaTarget(0);\n                    if (!d.fixed) {\n                        d.fx = null;\n                        d.fy = null;\n                    }\n                }));\n\n        // Draw circle\n        g.append(\"circle\").attr(\"r\", nodeSize || 4);\n\n        // Draw text\n        g.append(\"text\")\n            .attr(\"dx\", \"1em\")\n            .attr(\"dy\", \".35em\")\n            .merge(node.select(\"text\"))\n            .text((d) => d.v);\n\n        // Reinitialize force\n        force.current.nodes(nodes);\n        force.current.force(\"links\").links(links);\n    }, [nodes, links]);\n\n    // Visual options\n    useEffect(() => {\n        d3.select(display.current).selectAll(\".node\").select(\"circle\").attr(\"r\", nodeSize || 4);\n    }, [nodeSize]);\n    useEffect(() => {\n        d3.select(display.current).selectAll(\"line\").attr(\"stroke-width\", linkWidth || 2);\n    }, [linkWidth]);\n    useEffect(() => {\n        force.current.force(\"links\").distance(linkDistance || 1);\n    }, [linkDistance]);\n\n    // Runs when onClickNode changes\n    useEffect(() => {\n        d3.selectAll(\"g\").on(\"click\", (e, d) => {\n            onClickNode(d);\n        })\n    }, [onClickNode]);\n\n    // Animating pathfinding\n    useEffect(() => {\n        d3.selectAll(\".expanded\").attr(\"r\", nodeSize).attr(\"class\", \"\");\n        expands.forEach((id) => {\n            d3.select(`#node-${id}`).select(\"circle\")\n                .attr(\"class\", \"expanded\");\n        });\n    }, [expands]);\n    useEffect(() => {\n        d3.selectAll(\".path\").attr(\"class\", \"\");\n        d3.selectAll(\"line\").attr(\"marker-end\", \"url(#arrow)\");\n        let prev = null;\n        path.forEach((id) => {\n            d3.select(`#node-${id}`).select(\"circle\")\n                .attr(\"class\", \"path\");\n            if (prev != null) {\n                d3.select(`#link-${prev}-${id}`)\n                    .attr(\"class\", \"path\")\n                    .attr(\"marker-end\", \"url(#path-arrow)\");\n            }\n            prev = id;\n        });\n    }, [path]);\n    return (\n        <svg ref={display} width=\"100%\" height=\"100%\">\n            <defs>\n                <marker id=\"arrow\" markerWidth=\"4\" markerHeight=\"4\" refX=\"5\" refY=\"2\" orient=\"auto\">\n                    <polygon points={\"0 0, 4 2, 0 4\"} />\n                </marker>\n                <marker id=\"path-arrow\" markerWidth=\"4\" markerHeight=\"4\" refX=\"5\" refY=\"2\" orient=\"auto\">\n                    <polygon points={\"0 0, 4 2, 0 4\"} />\n                </marker>\n            </defs>\n        </svg>\n    );\n}\nexport default GraphDisplay;","import './NodeEditor.css';\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nfunction NodeEditor({ change, action, enterAction, value, icon, inputRef }) {\n    const enter = (event) => {\n        if (event.key === 'Enter') {\n            enterAction ? enterAction && enterAction() : action && action();\n        }\n    }\n    return (\n        <div className=\"node\">\n            <input\n                placeholder=\"value\"\n                type=\"text\"\n                ref={inputRef}\n                value={value}\n                onKeyDown={enter}\n                onChange={change && ((e) => change(e.target.value))} />\n            <div className=\"action\"><FontAwesomeIcon icon={icon} fixedWidth onClick={() => action && action()} /></div>\n        </div>\n    );\n}\nexport default NodeEditor;","import './LinkEditor.css';\nimport React, { useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\n\nfunction LinkEditor({ action, icon, nodes }) {\n    const sourceRef = useRef();\n    const targetRef = useRef();\n    return (\n        <div className=\"link\">\n            <select ref={sourceRef} className=\"link\"\n                defaultValue=\"source\">\n                <option disabled hidden>source</option>\n                {nodes && nodes.map((node, i) => <option key={i} value={node.id}>{node.v}</option>)}\n            </select>\n            <FontAwesomeIcon icon={faArrowRight} fixedWidth />\n            <select ref={targetRef} className=\"link\"\n                defaultValue=\"target\">\n                <option disabled hidden>target</option>\n                {nodes && nodes.map((node, i) => <option key={i} value={node.id}>{node.v}</option>)}\n            </select>\n            <div className=\"action\"><FontAwesomeIcon icon={icon} fixedWidth\n                onClick={() => action && action(parseInt(sourceRef.current.value, 10), parseInt(targetRef.current.value, 10))} />\n            </div>\n        </div>\n    );\n}\nexport default LinkEditor;","import './Link.css';\nimport React, { useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\n\nfunction Link({ source, target, icon, action }) {\n    const sourceRef = useRef();\n    const targetRef = useRef();\n    return (\n        <div className=\"link\">\n            <div ref={sourceRef} className=\"link-value\">{source}</div>\n            <FontAwesomeIcon icon={faArrowRight} fixedWidth />\n            <div ref={targetRef} className=\"link-value\">{target}</div>\n            <div className=\"action\"><FontAwesomeIcon icon={icon} fixedWidth onClick={() => action()} />\n            </div>\n        </div>\n    );\n}\nexport default Link;","import './Algorithm.css';\nimport React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\n\nfunction Algorithm({ name, action, args, nodes }) {\n    const [argValues, setArgs] = useState(args.map(() => null));\n    return (\n        <code className=\"algorithm\">\n            {name}&nbsp;\n            {args.map((arg, i) => {\n                return (\n                    <select\n                        defaultValue={arg}\n                        key={i}\n                        onChange={(e) => {\n                            setArgs((oldValues) => {\n                                let newValues = [...oldValues];\n                                newValues[i] = e.target.value;\n                                return newValues;\n                            });\n                        }}>\n                        <option disabled hidden>{arg}</option>\n                        {nodes && nodes.map((node, j) => <option key={j} value={node.id}>{node.v}</option>)}\n                    </select>\n                );\n            })}\n            <div className=\"action\"><FontAwesomeIcon icon={faArrowRight} fixedWidth onClick={() => action && action(...argValues.map((value) => parseInt(value, 10)))} /></div>\n        </code>\n    );\n}\nexport default Algorithm;","/**\n* Creates a new graph object\n* @return {Object} A new graph\n*/\nexport function create() {\n    // Return a new graph with no nodes or links\n    return { nodes: [], links: [], id: 0, n: 0 };\n}\n/**\n* Add a node to a graph\n* @param  {Object} g     The graph\n* @param  {...any} value The value for the new node\n* @return {Object}       A new graph containing the new node\n*/\nexport function addNode(g, ...value) {\n    // Create new nodes for each value\n    let id = g.id;\n    let nodes = value.map((v) => { return { v: v, id: id++ } });\n\n    // Return a new graph with the new nodes in g.nodes\n    return { ...g, nodes: [...g.nodes, ...nodes], id, n: g.n + nodes.length };\n}\n/**\n* Returns the node with a certain id\n* @param  {Object} g  The graph\n* @param  {number} id The id of the node\n* @return {any}       The node\n*/\nexport function getNode(g, id) {\n    return g.nodes.find((node) => node.id === id);\n}\n/**\n* Update a node's value\n* @param  {Object} g     The graph\n* @param  {number} id    The id of the node to be updated\n* @param  {...any} value The value for the node\n* @return {Object}       A new graph containing the updated node\n*/\nexport function updateNode(g, id, value) {\n    let nodes = [...g.nodes];\n    let index = 0;\n    for (let node of nodes) {\n        if (node.id === id) {\n            index = node.index;\n            break;\n        }\n    }\n    nodes[index].v = value\n    return { ...g, nodes };\n}\n/**\n* Check whether or not a node with a given value exists in a graph\n* @param  {Object} g     The graph\n* @param  {...any} value The value\n* @return {boolean}      Whether or not the graph vontains a node with the given value\n*/\nexport function contains(g, value) {\n    let nodes = [...g.nodes];\n    for (let node of nodes) {\n        if (value === node.v) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n* Remove a node from a graph\n* @param  {Object} g     The graph\n* @param  {...number} id The id of the node to be removed\n* @return {Object}       A new graph that does not contain the node or any links with the node\n*/\nexport function removeNode(g, ...id) {\n    // Put ids in a map for constant lookup\n    let map = {}\n    for (const i of id)\n        map[i] = true;\n\n    // Remove the nodes from the nodes list\n    let nodes = g.nodes.filter((node) => !map[node.id]);\n\n    // Remove any links with the node\n    let links = g.links.filter((link) => !map[link.source.id] && !map[link.target.id] && !map[link.source] && !map[link.target]);\n\n    // Return a new graph with the updated node and link list\n    return { ...g, nodes, links, n: nodes.length };\n}\n/**\n* Add a link to a graph\n* @param  {Object} g       The graph\n* @param  {...number} link The source, target pair to be added\n* @return {Object}         A new graph containing a link between source and target\n*/\nexport function addLink(g, ...link) {\n    // Put ids in a map for constant lookup\n    let map = {}\n    for (const node of g.nodes) {\n        map[node.id] = true;\n    }\n\n    // Add valid links to a list\n    let links = []\n    for (let i = 1; i < link.length; i += 2) {\n        let source = link[i - 1];\n        let target = link[i];\n\n        // Check that the link is between two valid nodes\n        if (map[source] && map[target]) {\n            // Check that the link doesn't already exist\n            if (g.links.reduce((acc, cur) => {\n                return acc &&\n                    !(cur.source.id === source && cur.target.id === target) &&\n                    !(cur.source === source && cur.target === target);\n            }, true)) {\n                // Add the link to the list\n                links.push({ source, target });\n            }\n        }\n    }\n    // Return a new graph with the new links in g.links\n    return { ...g, links: [...g.links, ...links] };\n}\n/**\n* Remove a link from a graph\n* @param  {Object} g       The graph\n* @param  {...number} link The source, target pair to be removed\n* @return {Object}         A new graph that does not contain a link between source and target\n*/\nexport function removeLink(g, ...link) {\n    // Put all links in a map for constant lookup\n    let map = {};\n    for (let i = 1; i < link.length; i += 2) {\n        let source = link[i - 1];\n        let target = link[i];\n        if (!map[source])\n            map[source] = {};\n        map[source][target] = true;\n    }\n\n    // Remove all pre-existing links\n    let links = g.links.filter((l) =>\n        !(map[l.source.id] && map[l.source.id][l.target.id])\n        && !(map[l.source] && map[l.source][l.target])\n    );\n\n    // Return a new graph with the new links in g.links\n    return { ...g, links };\n}","import './FloatingPanel.css';\nimport React, { useState } from 'react';\nimport Draggable from 'react-draggable';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons';\n\nfunction FloatingPanel({ title, children, top, left, bottom, right, disabled }) {\n    const [expand, toggleExpand] = useState(true);\n    return (\n        <Draggable handle=\".floating-panel-title\">\n            <div className={`floating-panel ${expand ? \"floating-panel-max\" : \"floating-panel-min\"}`} style={{ top, left, bottom, right }}>\n                <div className=\"floating-panel-title\">\n                    <b>{title}</b>\n                    <div className=\"action\">\n                        <FontAwesomeIcon icon={expand ? faMinus : faPlus} fixedWidth onClick={() => {\n                            toggleExpand(!expand);\n                        }} />\n                    </div>\n                </div>\n                {expand ? <div className=\"floating-panel-content\" disabled={disabled || false}>\n                    {children}\n                </div> : null}\n            </div>\n        </Draggable >\n    );\n}\nexport default FloatingPanel;","/**\n* Return an adjacency list generated from a given graph\n* @param  {Object} g The graph\n* @return {Object}   The adjacency list representing the edges in the graph\n*/\nexport function getAdjacencyList(graph) {\n    let list = {};\n    graph.nodes.forEach((node) => {\n        list[node.id] = [];\n    });\n    graph.links.forEach((link) => {\n        let source = link.source.id != null ? link.source.id : link.source;\n        let target = link.target.id != null ? link.target.id : link.target;\n        list[source].push(target);\n    });\n    return list;\n}\n/**\n* Find a path between a start and goal node with breadth first search\n* @param  {number} start         The id of the starting node\n* @param  {number} goal          The id of the goal node\n* @param  {Object} adjacencyList The id of the node to be removed\n* @return {Object}               An object containing a list of expanded nodes in order and the final path\n*/\nexport function breadthFirstSearch(start, goal, adjacencyList) {\n    // A map between a node and the node it was reached from\n    let trace = new Map();\n    trace.set(start, null);\n\n    let queue = [start];\n\n    // The list of expanded nodes in order of expansion\n    let expands = [];\n\n    // The path\n    let path = [];\n\n    while (queue.length) {\n        // Take a node from the beginning of the queue\n        let currentNode = queue.shift();\n\n        // Add the node to the list of expanded nodes\n        expands.push(currentNode);\n        \n        // If this is the goal node stop searching\n        if (currentNode === goal) {\n            path.push(goal);\n            break;\n        }\n\n        // Expand the node\n        for (let target of adjacencyList[currentNode]) {\n            // Only add to the queue if the neighbor node has not been seen\n            if (!trace.has(target)) {\n                // Set the traceback of the neighbor node to the current node\n                trace.set(target, currentNode);\n                // Push the neighbor node to the queue\n                queue.push(target);\n            }\n        }\n    }\n\n    // Rebuild path backwards from the goal using trace\n    if (path.length) {\n        while (trace.get(path[0]) != null) {\n            // Add the parent node to the beginning of the path\n            path.unshift(trace.get(path[0]));\n        }\n    }\n\n    // Return a list of expands and a list representing the path found\n    return { expands, path };\n}\n/**\n* Find a path between a start and goal node with depth first search\n* @param  {number} start         The id of the starting node\n* @param  {number} goal          The id of the goal node\n* @param  {Object} adjacencyList The id of the node to be removed\n* @return {Object}               An object containing a list of expanded nodes in order and the final path\n*/\nexport function depthFirstSearch(start, goal, adjacencyList) {\n    // A map between a node and the node it was reached from\n    let trace = new Map();\n    trace.set(start, null);\n\n    let stack = [start];\n\n    // The list of expanded nodes in order of expansion\n    let expands = [];\n\n    // The path\n    let path = [];\n\n    while (stack.length) {\n        // Take a node from the top of the stack\n        let currentNode = stack.pop();\n\n        // If this is the goal node stop searching\n        if (currentNode === goal) {\n            path.push(goal);\n            break;\n        }\n\n        // Add the node to the list of expanded nodes\n        expands.push(currentNode);\n\n        // Expand the node\n        for (let target of adjacencyList[currentNode]) {\n            // Only add to the stack if the neighbor node has not been seen\n            if (!trace.has(target)) {\n                // Set the traceback of the neighbor node to the current node\n                trace.set(target, currentNode);\n                // Push the neighbor node to the stack\n                stack.push(target);\n            }\n        }\n    }\n\n    // Rebuild path backwards from the goal using trace\n    if (path.length) {\n        while (trace.get(path[0]) != null) {\n            // Add the parent node to the beginning of the path\n            path.unshift(trace.get(path[0]));\n        }\n    }\n\n    // Return a list of expands and a list representing the path found\n    return { expands, path };\n}","import './App.css';\nimport React, { useRef, useState } from 'react';\nimport GraphDisplay from './components/GraphDisplay';\nimport NodeEditor from './components/NodeEditor';\nimport LinkEditor from './components/LinkEditor';\nimport Link from './components/Link';\nimport Algorithm from './components/Algorithm';\nimport * as G from './util/graph';\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons'\nimport FloatingPanel from './components/FloatingPanel';\nimport * as A from './util/algorithms';\n\nconst example = G.addLink(G.addNode(G.create(), 0, 1, 2, 3, 4, 5, 6, 7, 8), 0, 1, 0, 2, 2, 4, 2, 6, 1, 3, 1, 5, 3, 7, 4, 8);\n\nfunction App() {\n  const [graph, setGraph] = useState(example);\n  const nodeRefs = useRef({});\n  const addNodeRef = useRef();\n  const [options, setOptions] = useState({ nodeSize: 4, linkWidth: 2, linkDistance: 1, iterationSpeed: 1500 });\n  const [search, setSearch] = useState({ expands: [], path: [] });\n  const [disabled, setDisabled] = useState(false);\n\n  const animateSearch = (results) => {\n    setDisabled(true);\n    let expands = [];\n    let path = [];\n    let expandi = 0;\n    let pathi = 0;\n    let animation = setInterval(() => {\n      if (expandi < results.expands.length) {\n        expands.push(results.expands[expandi++]);\n        console.log(expands);\n      } else if (pathi < results.path.length) {\n        path.push(results.path[pathi++]);\n        console.log(path);\n      } else {\n        setTimeout(() => {\n          setSearch({ expands: [], path: [] });\n          setDisabled(false);\n        }, 2000);\n        clearInterval(animation);\n      }\n      setSearch({ expands: [...expands], path: [...path] });\n    }, 2000 - options.iterationSpeed);\n  }\n\n  return (\n    <div className=\"App\">\n      <FloatingPanel title=\"Nodes\" top=\"1em\" left=\"1em\" disabled={disabled}>\n        <NodeEditor inputRef={addNodeRef}\n          action={() => {\n            let value = addNodeRef.current.value;\n            if (value === \"\" || G.contains(graph, value)) {\n              console.log(\"Must be a new value\");\n            } else {\n              setGraph((old) => G.addNode(old, value));\n              addNodeRef.current.value = \"\";\n            }\n            addNodeRef.current.focus();\n          }}\n          icon={faPlus} />\n        <hr />\n        <div className=\"list\">\n          {graph.nodes.map((node, i) => {\n            return (\n              <NodeEditor key={i} value={node.v} inputRef={(el) => (nodeRefs.current[node.id] = el)}\n                change={(v) => {\n                  G.contains(graph, v) ?\n                    setGraph((old) => { return { ...old } })\n                    :\n                    setGraph((old) => G.updateNode(old, node.id, v))\n                }}\n                action={() => setGraph((old) => G.removeNode(old, node.id))}\n                enterAction={() => {\n                  if (i + 1 < graph.nodes.length) {\n                    nodeRefs.current[graph.nodes[i + 1].id].focus();\n                    nodeRefs.current[graph.nodes[i + 1].id].select();\n                    nodeRefs.current[graph.nodes[i + 1].id].scrollIntoView();\n                  } else {\n                    nodeRefs.current[node.id].blur();\n                  }\n                }}\n                icon={faTimes} />\n            );\n          })}\n        </div>\n      </FloatingPanel>\n      <FloatingPanel title=\"Edges\" bottom=\"1em\" left=\"1em\" disabled={disabled}>\n        <LinkEditor nodes={graph.nodes}\n          icon={faPlus}\n          action={(source, target) => {\n            setGraph((old) => G.addLink(old, source, target));\n          }} />\n        <hr />\n        <div className=\"list\">\n          {graph.links.map((link, i) => {\n            let sourceId = link.source.id != null ? link.source.id : link.source;\n            let targetId = link.target.id != null ? link.target.id : link.target;\n            let sourceV = link.source.v != null ? link.source.v : G.getNode(graph, sourceId).v;\n            let targetV = link.target.v != null ? link.target.v : G.getNode(graph, targetId).v;\n            return (\n              <Link key={i}\n                source={sourceV}\n                target={targetV}\n                action={() => { setGraph((old) => G.removeLink(old, sourceId, targetId)) }}\n                icon={faTimes} />\n            );\n          })}\n        </div>\n      </FloatingPanel>\n      <FloatingPanel title=\"Options\" bottom=\"1em\" right=\"1em\">\n        <b>Node size</b>\n        <input type=\"range\" min=\"1\" max=\"20\" step=\".1\" value={options.nodeSize} onInput={(e) => {\n          setOptions({ ...options, nodeSize: e.target.value });\n        }} />\n        <b>Edge width</b>\n        <input type=\"range\" min=\"1\" max=\"10\" step=\".05\" value={options.linkWidth} onInput={(e) => {\n          setOptions({ ...options, linkWidth: e.target.value });\n        }} />\n        <b>Edge distance</b>\n        <input type=\"range\" min=\"1\" max=\"1000\" step=\"5\" value={options.linkDistance} onInput={(e) => {\n          setOptions({ ...options, linkDistance: e.target.value });\n        }} />\n        <b>Iteration Speed</b>\n        <input type=\"range\" min=\"0\" max=\"2000\" step=\"5\" value={options.iterationSpeed} onInput={(e) => {\n          setOptions({ ...options, iterationSpeed: e.target.value });\n        }} />\n      </FloatingPanel>\n      <FloatingPanel title=\"Algorithms\" top=\"1em\" right=\"1em\" disabled={disabled}>\n        <div className=\"list\">\n          <Algorithm name=\"bfs\" args={[\"start\", \"goal\"]} nodes={graph.nodes} action={(start, goal) => {\n            if (isNaN(start) || isNaN(goal)) return;\n            let results = A.breadthFirstSearch(start, goal, A.getAdjacencyList(graph));\n            animateSearch(results);\n          }}></Algorithm>\n          <Algorithm name=\"dfs\" args={[\"start\", \"goal\"]} nodes={graph.nodes} action={(start, goal) => {\n            if (isNaN(start) || isNaN(goal)) return;\n            let results = A.depthFirstSearch(start, goal, A.getAdjacencyList(graph));\n            animateSearch(results);\n          }}></Algorithm>\n          <Algorithm name=\"uniformcost\" args={[\"start\", \"goal\"]} nodes={graph.nodes}></Algorithm>\n          <Algorithm name=\"greedy\" args={[\"start\", \"goal\"]} nodes={graph.nodes}></Algorithm>\n          <Algorithm name=\"astar\" args={[\"start\", \"goal\"]} nodes={graph.nodes}></Algorithm>\n        </div>\n      </FloatingPanel>\n      <GraphDisplay nodes={graph.nodes} links={graph.links}\n        nodeSize={options.nodeSize}\n        linkWidth={options.linkWidth}\n        linkDistance={options.linkDistance}\n        onClickNode={(d) => {\n          if (nodeRefs.current[d.id]) {\n            nodeRefs.current[d.id].focus();\n            nodeRefs.current[d.id].select();\n            nodeRefs.current[d.id].scrollIntoView();\n          }\n          d.fixed = !d.fixed;\n          if (d.fixed) {\n            d.fx = d.x;\n            d.fy = d.y;\n          } else {\n            d.fx = null;\n            d.fy = null;\n          }\n        }}\n        expands={search.expands}\n        path={search.path}\n      />\n    </div >\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}