{"version":3,"sources":["components/GraphDisplay.js","components/NodeEditor.js","components/LinkEditor.js","components/Link.js","components/Algorithm.js","util/graph.js","components/FloatingPanel.js","util/algorithms.js","App.js","reportWebVitals.js","index.js"],"names":["GraphDisplay","_ref","nodes","links","onClickNode","nodeSize","linkWidth","linkDistance","display","useRef","force","boundX","x","container","current","getBoundingClientRect","Math","max","min","width","boundY","y","height","useEffect","d3","strength","id","d","alphaDecay","svg","on","selectAll","attr","source","target","resize","alpha","restart","window","addEventListener","link","data","exit","transition","ease","style","duration","remove","enter","insert","node","g","append","call","event","active","alphaTarget","fx","fy","fixed","merge","select","text","v","distance","e","react_default","a","createElement","ref","className","markerWidth","markerHeight","refX","refY","orient","points","NodeEditor","change","action","enterAction","value","icon","inputRef","placeholder","type","onKeyDown","key","onChange","index_es","fixedWidth","onClick","LinkEditor","sourceRef","targetRef","defaultValue","disabled","hidden","map","i","faArrowRight","parseInt","Link","Algorithm","name","args","_useState","useState","_useState2","Object","slicedToArray","argValues","setArgs","arg","oldValues","newValues","toConsumableArray","j","apply","addNode","_len","arguments","length","Array","_key","objectSpread","concat","n","getNode","find","contains","_step2","_iterator2","_createForOfIteratorHelper","s","done","err","f","addLink","_step3","_arguments","_iterator3","_loop","undefined","reduce","acc","cur","push","FloatingPanel","title","children","top","left","bottom","right","expand","toggleExpand","cjs_default","handle","faMinus","faPlus","getAdjacencyList","graph","list","forEach","example","G","App","setGraph","nodeRefs","addNodeRef","_useState3","_useState4","options","setOptions","components_FloatingPanel","components_NodeEditor","console","log","old","focus","el","_step","index","_iterator","_len2","_key2","_i","_id","filter","scrollIntoView","blur","faTimes","components_LinkEditor","sourceId","targetId","sourceV","targetV","components_Link","step","onInput","components_Algorithm","start","goal","adjacencyList","trace","Map","set","queue","expands","path","currentNode","shift","algorithms_createForOfIteratorHelper","has","get","unshift","A","stack","pop","components_GraphDisplay","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.2d4ee3b3.chunk.js","sourcesContent":["import './GraphDisplay.css';\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nfunction GraphDisplay({ nodes, links, onClickNode, nodeSize, linkWidth, linkDistance }) {\n    const display = useRef(null);\n    const force = useRef(null);\n\n    // Bounding box\n    const boundX = (x) => {\n        let container = display.current.getBoundingClientRect();\n        return Math.max(Math.min(container.width, x), 0);\n    }\n    const boundY = (y) => {\n        let container = display.current.getBoundingClientRect();\n        return Math.max(Math.min(container.height, y), 0);\n    }\n\n    // Only runs once\n    useEffect(() => {\n        // Create force\n        force.current = d3.forceSimulation()\n            .force(\"gravity\", d3.forceManyBody())\n            .force(\"links\", d3.forceLink().strength(0.05).id((d) => d.id))\n            .force(\"centerX\", d3.forceX().strength(0.005))\n            .force(\"centerY\", d3.forceY().strength(0.005))\n            .alphaDecay(0);\n\n        // Svg reference\n        let svg = d3.select(display.current);\n\n        // Move nodes and links every tick\n        force.current.on(\"tick\", function () {\n            svg.selectAll(\".link\")\n                .attr(\"x1\", (d) => { return boundX(d.source.x); })\n                .attr(\"y1\", (d) => { return boundY(d.source.y); })\n                .attr(\"x2\", (d) => { return boundX(d.target.x); })\n                .attr(\"y2\", (d) => { return boundY(d.target.y); });\n\n            svg.selectAll(\".node\").attr(\"transform\", (d) => {\n                return \"translate(\" + boundX(d.x) + \",\" + boundY(d.y) + \")\";\n            });\n        });\n\n        // Recalculate centering forces on resize\n        const resize = () => {\n            let container = display.current.getBoundingClientRect();\n            force.current.force(\"centerX\").x(container.width / 2);\n            force.current.force(\"centerY\").y(container.height / 2);\n            force.current.alpha(1).restart();\n        }\n        window.addEventListener(\"resize\", () => {\n            resize();\n        });\n        resize();\n    }, []);\n\n    // Runs when nodes or links change\n    useEffect(() => {\n        // Svg reference\n        let svg = d3.select(display.current);\n\n        // Draw links\n        let link = svg.selectAll(\".link\").data(links, (d) => d.id);\n\n        // Animate removed links\n        link.exit().transition().ease(d3.easeExpOut).style(\"opacity\", 0).duration(500).remove();\n\n        // Create new links\n        link.enter().insert(\"line\", \":first-child\").attr(\"class\", \"link\").attr(\"stroke-width\", linkWidth || 2).attr(\"marker-end\", \"url(#arrowhead)\");\n\n        // Draw nodes\n        let node = svg.selectAll(\".node\").data(nodes, (d) => d.id);\n\n        // Animate removed nodes\n        node.exit().transition().ease(d3.easeExpOut).style(\"opacity\", 0).duration(500).remove();\n\n        // Create new nodes\n        let g = node.enter().append(\"g\")\n            .attr(\"class\", \"node\")\n            .call(d3.drag()\n                .on(\"start\", (event, d) => {\n                    if (!event.active) force.current.alphaTarget(0.3).restart();\n                    d.fx = d.x;\n                    d.fy = d.y;\n                })\n                .on(\"drag\", (event, d) => {\n                    d.fx = event.x;\n                    d.fy = event.y;\n                })\n                .on(\"end\", (event, d) => {\n                    if (!event.active) force.current.alphaTarget(0);\n                    if (!d.fixed) {\n                        d.fx = null;\n                        d.fy = null;\n                    }\n                }));\n\n        // Draw circle\n        g.append(\"circle\").attr(\"r\", nodeSize || 4);\n\n        // Draw text\n        g.append(\"text\")\n            .attr(\"dx\", \"1em\")\n            .attr(\"dy\", \".35em\")\n            .merge(node.select(\"text\"))\n            .text((d) => d.v);\n\n        // Reinitialize force\n        force.current.nodes(nodes);\n        force.current.force(\"links\").links(links);\n    }, [nodes, links]);\n\n    useEffect(() => {\n        d3.select(display.current).selectAll(\".node\").select(\"circle\").attr(\"r\", nodeSize || 4);\n    }, [nodeSize]);\n    useEffect(() => {\n        d3.select(display.current).selectAll(\".link\").attr(\"stroke-width\", linkWidth || 2);\n    }, [linkWidth]);\n    useEffect(() => {\n        force.current.force(\"links\").distance(linkDistance || 1);\n    }, [linkDistance]);\n\n    // Runs when onClickNode changes\n    useEffect(() => {\n        d3.selectAll(\"g\").on(\"click\", (e, d) => {\n            onClickNode(d);\n        })\n    }, [onClickNode])\n    return (\n        <svg ref={display} width=\"100%\" height=\"100%\">\n            <defs>\n                <marker id=\"arrowhead\" className=\"arrow\" markerWidth=\"4\" markerHeight=\"4\" refX=\"5\" refY=\"2\" orient=\"auto\">\n                    <polygon points={\"0 0, 4 2, 0 4\"} />\n                 </marker>\n            </defs>\n        </svg>\n    );\n}\nexport default GraphDisplay;","import './NodeEditor.css';\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nfunction NodeEditor({ change, action, enterAction, value, icon, inputRef }) {\n    const enter = (event) => {\n        if (event.key === 'Enter') {\n            enterAction ? enterAction && enterAction() : action && action();\n        }\n    }\n    return (\n        <div className=\"node\">\n            <input\n                placeholder=\"value\"\n                type=\"text\"\n                ref={inputRef}\n                value={value}\n                onKeyDown={enter}\n                onChange={change && ((e) => change(e.target.value))} />\n            <div className=\"action\"><FontAwesomeIcon icon={icon} fixedWidth onClick={() => action && action()} /></div>\n        </div>\n    );\n}\nexport default NodeEditor;","import './LinkEditor.css';\nimport React, { useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\n\nfunction LinkEditor({ action, icon, nodes }) {\n    const sourceRef = useRef();\n    const targetRef = useRef();\n    return (\n        <div className=\"link\">\n            <select ref={sourceRef} className=\"link\"\n                defaultValue=\"source\">\n                <option disabled hidden>source</option>\n                {nodes && nodes.map((node, i) => <option key={i} value={node.id}>{node.v}</option>)}\n            </select>\n            <FontAwesomeIcon icon={faArrowRight} fixedWidth />\n            <select ref={targetRef} className=\"link\"\n                defaultValue=\"target\">\n                <option disabled hidden>target</option>\n                {nodes && nodes.map((node, i) => <option key={i} value={node.id}>{node.v}</option>)}\n            </select>\n            <div className=\"action\"><FontAwesomeIcon icon={icon} fixedWidth\n                onClick={() => action && action(parseInt(sourceRef.current.value, 10), parseInt(targetRef.current.value, 10))} />\n            </div>\n        </div>\n    );\n}\nexport default LinkEditor;","import './Link.css';\nimport React, { useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\n\nfunction Link({ source, target, icon, action }) {\n    const sourceRef = useRef();\n    const targetRef = useRef();\n    return (\n        <div className=\"link\">\n            <div ref={sourceRef} className=\"link-value\">{source}</div>\n            <FontAwesomeIcon icon={faArrowRight} fixedWidth />\n            <div ref={targetRef} className=\"link-value\">{target}</div>\n            <div className=\"action\"><FontAwesomeIcon icon={icon} fixedWidth onClick={() => action()} />\n            </div>\n        </div>\n    );\n}\nexport default Link;","import './Algorithm.css';\nimport React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\n\nfunction Algorithm({ name, action, args, nodes }) {\n    const [argValues, setArgs] = useState(args.map(() => null));\n    return (\n        <code className=\"algorithm\">\n            {name}&nbsp;\n            {args.map((arg, i) => {\n                return (\n                    <select\n                        defaultValue={arg}\n                        key={i}\n                        onChange={(e) => {\n                            setArgs((oldValues) => {\n                                let newValues = [...oldValues];\n                                newValues[i] = e.target.value;\n                                return newValues;\n                            });\n                        }}>\n                        <option disabled hidden>{arg}</option>\n                        {nodes && nodes.map((node, j) => <option key={j} value={node.id}>{node.v}</option>)}\n                    </select>\n                );\n            })}\n            <div className=\"action\"><FontAwesomeIcon icon={faArrowRight} fixedWidth onClick={() => action && action(...argValues.map((value) => parseInt(value, 10)))}/></div>\n        </code>\n    );\n}\nexport default Algorithm;","/**\n* Creates a new graph object\n* @return {Object} A new graph\n*/\nexport function create() {\n    // Return a new graph with no nodes or links\n    return { nodes: [], links: [], id: 0, n: 0 };\n}\n/**\n* Add a node to a graph\n* @param  {Object} g     The graph\n* @param  {...any} value The value for the new node\n* @return {Object}       A new graph containing the new node\n*/\nexport function addNode(g, ...value) {\n    // Create new nodes for each value\n    let id = g.id;\n    let nodes = value.map((v) => { return { v: v, id: id++ } });\n\n    // Return a new graph with the new nodes in g.nodes\n    return { ...g, nodes: [...g.nodes, ...nodes], id, n: g.n + nodes.length };\n}\n/**\n* Returns the node with a certain id\n* @param  {Object} g  The graph\n* @param  {number} id The id of the node\n* @return {any}       The node\n*/\nexport function getNode(g, id) {\n    return g.nodes.find((node) => node.id === id);\n}\n/**\n* Update a node's value\n* @param  {Object} g     The graph\n* @param  {number} id    The id of the node to be updated\n* @param  {...any} value The value for the node\n* @return {Object}       A new graph containing the updated node\n*/\nexport function updateNode(g, id, value) {\n    let nodes = [...g.nodes];\n    let index = 0;\n    for (let node of nodes) {\n        if (node.id === id) {\n            index = node.index;\n            break;\n        }\n    }\n    nodes[index].v = value\n    return { ...g, nodes };\n}\n/**\n* Check whether or not a node with a given value exists in a graph\n* @param  {Object} g     The graph\n* @param  {...any} value The value\n* @return {boolean}      Whether or not the graph vontains a node with the given value\n*/\nexport function contains(g, value) {\n    let nodes = [...g.nodes];\n    for (let node of nodes) {\n        if (value === node.v) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n* Remove a node from a graph\n* @param  {Object} g     The graph\n* @param  {...number} id The id of the node to be removed\n* @return {Object}       A new graph that does not contain the node or any links with the node\n*/\nexport function removeNode(g, ...id) {\n    // Put ids in a map for constant lookup\n    let map = {}\n    for (const i of id)\n        map[i] = true;\n\n    // Remove the nodes from the nodes list\n    let nodes = g.nodes.filter((node) => !map[node.id]);\n\n    // Remove any links with the node\n    let links = g.links.filter((link) => !map[link.source.id] && !map[link.target.id] && !map[link.source] && !map[link.target]);\n\n    // Return a new graph with the updated node and link list\n    return { ...g, nodes, links, n: nodes.length };\n}\n/**\n* Add a link to a graph\n* @param  {Object} g       The graph\n* @param  {...number} link The source, target pair to be added\n* @return {Object}         A new graph containing a link between source and target\n*/\nexport function addLink(g, ...link) {\n    // Put ids in a map for constant lookup\n    let map = {}\n    for (const node of g.nodes) {\n        map[node.id] = true;\n    }\n\n    // Add valid links to a list\n    let links = []\n    for (let i = 1; i < link.length; i += 2) {\n        let source = link[i - 1];\n        let target = link[i];\n\n        // Check that the link is between two valid nodes\n        if (map[source] && map[target]) {\n            // Check that the link doesn't already exist\n            if (g.links.reduce((acc, cur) => {\n                return acc &&\n                    !(cur.source.id === source && cur.target.id === target) &&\n                    !(cur.source === source && cur.target === target);\n            }, true)) {\n                // Add the link to the list\n                links.push({ source, target });\n            }\n        }\n    }\n    // Return a new graph with the new links in g.links\n    return { ...g, links: [...g.links, ...links] };\n}\n/**\n* Remove a link from a graph\n* @param  {Object} g       The graph\n* @param  {...number} link The source, target pair to be removed\n* @return {Object}         A new graph that does not contain a link between source and target\n*/\nexport function removeLink(g, ...link) {\n    // Put all links in a map for constant lookup\n    let map = {};\n    for (let i = 1; i < link.length; i += 2) {\n        let source = link[i - 1];\n        let target = link[i];\n        if (!map[source])\n            map[source] = {};\n        map[source][target] = true;\n    }\n\n    // Remove all links\n    let links = g.links.filter((link) =>\n        !(map[link.source.id] && map[link.source.id][link.target.id])\n        && !(map[link.source] && map[link.source][link.target])\n    );\n\n    // Return a new graph with the new links in g.links\n    return { ...g, links };\n}","import './FloatingPanel.css';\nimport React, { useState } from 'react';\nimport Draggable from 'react-draggable';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons';\n\nfunction FloatingPanel({ title, children, top, left, bottom, right }) {\n    const [expand, toggleExpand] = useState(true);\n    return (\n        <Draggable handle=\".floating-panel-title\">\n            <div className={`floating-panel ${expand ? \"floating-panel-max\" : \"floating-panel-min\"}`} style={{ top, left, bottom, right }}>\n                <div className=\"floating-panel-title\">\n                    <b>{title}</b>\n                    <div className=\"action\">\n                        <FontAwesomeIcon icon={expand ? faMinus : faPlus} fixedWidth onClick={() => {\n                            toggleExpand(!expand);\n                        }} />\n                    </div>\n                </div>\n                {expand ? <div className=\"floating-panel-content\">\n                    {children}\n                </div> : null}\n            </div>\n        </Draggable>\n    );\n}\nexport default FloatingPanel;","/**\n* Return an adjacency list generated from a given graph\n* @param  {Object} g The graph\n* @return {Object}   The adjacency list representing the edges in the graph\n*/\nexport function getAdjacencyList(graph) {\n    let list = {};\n    graph.nodes.forEach((node) => {\n        list[node.id] = [];\n    });\n    graph.links.forEach((link) => {\n        let source = link.source.id != null ? link.source.id : link.source;\n        let target = link.target.id != null ? link.target.id : link.target;\n        list[source].push(target);\n    });\n    return list;\n}\n/**\n* Find a path between a start and goal node with breadth first search\n* @param  {number} start         The id of the starting node\n* @param  {number} goal          The id of the goal node\n* @param  {Object} adjacencyList The id of the node to be removed\n* @return {Object}               An object containing a list of expanded nodes in order and the final path\n*/\nexport function breadthFirstSearch(start, goal, adjacencyList) {\n    // A map between a node and the node it was reached from\n    let trace = new Map();\n    trace.set(start, null);\n\n    let queue = [start];\n    \n    // The list of expanded nodes in order of expansion\n    let expands = [];\n\n    // The path\n    let path = [];\n\n    while(queue.length) {\n        // Take a node from the beginning of the queue\n        let currentNode = queue.shift();\n        \n        // If this is the goal node stop searching\n        if(currentNode === goal) {\n            path.push(goal);\n            break;\n        }\n\n        // Add the node to the list of expanded nodes\n        expands.push(currentNode);\n\n        // Expand the node\n        for(let target of adjacencyList[currentNode]) {\n            // Only add to the queue if the neighbor node has not been seen\n            if(!trace.has(target)) {\n                // Set the traceback of the neighbor node to the current node\n                trace.set(target, currentNode);\n                // Push the neighbor node to the queue\n                queue.push(target);\n            }\n        }\n    }\n    \n    // Rebuild path backwards from the goal using trace\n    if(path.length) {\n        while(trace.get(path[0]) != null) {\n            // Add the parent node to the beginning of the path\n            path.unshift(trace.get(path[0]));\n        }\n    }\n    \n    // Return a list of expands and a list representing the path found\n    return {expands, path};\n}\n/**\n* Find a path between a start and goal node with depth first search\n* @param  {number} start         The id of the starting node\n* @param  {number} goal          The id of the goal node\n* @param  {Object} adjacencyList The id of the node to be removed\n* @return {Object}               An object containing a list of expanded nodes in order and the final path\n*/\nexport function depthFirstSearch(start, goal, adjacencyList) {\n    // A map between a node and the node it was reached from\n    let trace = new Map();\n    trace.set(start, null);\n\n    let stack = [start];\n    \n    // The list of expanded nodes in order of expansion\n    let expands = [];\n\n    // The path\n    let path = [];\n    \n    while(stack.length) {\n        // Take a node from the top of the stack\n        let currentNode = stack.pop();\n        \n        // If this is the goal node stop searching\n        if(currentNode === goal) {\n            path.push(goal);\n            break;\n        }\n\n        // Add the node to the list of expanded nodes\n        expands.push(currentNode);\n\n        // Expand the node\n        for(let target of adjacencyList[currentNode]) {\n            // Only add to the stack if the neighbor node has not been seen\n            if(!trace.has(target)) {\n                // Set the traceback of the neighbor node to the current node\n                trace.set(target, currentNode);\n                // Push the neighbor node to the stack\n                stack.push(target);\n            }\n        }\n    }\n    \n    // Rebuild path backwards from the goal using trace\n    if(path.length) {\n        while(trace.get(path[0]) != null) {\n            // Add the parent node to the beginning of the path\n            path.unshift(trace.get(path[0]));\n        }\n    }\n    \n    // Return a list of expands and a list representing the path found\n    return {expands, path};\n}","import './App.css';\nimport React, { useRef, useState } from 'react';\nimport GraphDisplay from './components/GraphDisplay';\nimport NodeEditor from './components/NodeEditor';\nimport LinkEditor from './components/LinkEditor';\nimport Link from './components/Link';\nimport Algorithm from './components/Algorithm';\nimport * as G from './util/graph';\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons'\nimport FloatingPanel from './components/FloatingPanel';\nimport * as A from './util/algorithms';\n\nconst example = G.addLink(G.addNode(G.create(), 0, 1, 2, 3, 4, 5, 6, 7, 8), 0, 1, 0, 2, 2, 4, 2, 6, 1, 3, 1, 5, 3, 7, 4, 8);\n\nfunction App() {\n  const [graph, setGraph] = useState(example);\n  const nodeRefs = useRef({});\n  const addNodeRef = useRef();\n  const [options, setOptions] = useState({ nodeSize: 4, linkWidth: 2, linkDistance: 1 });\n\n  return (\n    <div className=\"App\">\n      <FloatingPanel title=\"Nodes\" top=\"1em\" left=\"1em\">\n        <NodeEditor inputRef={addNodeRef}\n          action={() => {\n            let value = addNodeRef.current.value;\n            if (value === \"\" || G.contains(graph, value)) {\n              console.log(\"Must be a new value\");\n            } else {\n              setGraph((old) => G.addNode(old, value));\n              addNodeRef.current.value = \"\";\n            }\n            addNodeRef.current.focus();\n          }}\n          icon={faPlus} />\n        <hr />\n        <div className=\"list\">\n          {graph.nodes.map((node, i) => {\n            return (\n              <NodeEditor key={i} value={node.v} inputRef={(el) => (nodeRefs.current[node.id] = el)}\n                change={(v) => {\n                  G.contains(graph, v) ?\n                    setGraph((old) => { return { ...old } })\n                    :\n                    setGraph((old) => G.updateNode(old, node.id, v))\n                }}\n                action={() => setGraph((old) => G.removeNode(old, node.id))}\n                enterAction={() => {\n                  if (i + 1 < graph.nodes.length) {\n                    nodeRefs.current[graph.nodes[i + 1].id].focus();\n                    nodeRefs.current[graph.nodes[i + 1].id].select();\n                    nodeRefs.current[graph.nodes[i + 1].id].scrollIntoView();\n                  } else {\n                    nodeRefs.current[node.id].blur();\n                  }\n                }}\n                icon={faTimes} />\n            );\n          })}\n        </div>\n      </FloatingPanel>\n      <FloatingPanel title=\"Edges\" bottom=\"1em\" left=\"1em\">\n        <LinkEditor nodes={graph.nodes}\n          icon={faPlus}\n          action={(source, target) => {\n            setGraph((old) => G.addLink(old, source, target));\n          }} />\n        <hr />\n        <div className=\"list\">\n          {graph.links.map((link, i) => {\n            let sourceId = link.source.id != null ? link.source.id : link.source;\n            let targetId = link.target.id != null ? link.target.id : link.target;\n            let sourceV = link.source.v != null ? link.source.v : G.getNode(graph, sourceId).v;\n            let targetV = link.target.v != null ? link.target.v : G.getNode(graph, targetId).v;\n            return (\n              <Link key={i}\n                source={sourceV}\n                target={targetV}\n                action={() => { setGraph((old) => G.removeLink(old, sourceId, targetId)) }}\n                icon={faTimes} />\n            );\n          })}\n        </div>\n      </FloatingPanel>\n      <FloatingPanel title=\"Options\" bottom=\"1em\" right=\"1em\">\n        <b>Node size</b>\n        <input type=\"range\" min=\"1\" max=\"20\" step=\".1\" value={options.nodeSize} onInput={(e) => {\n          setOptions({ ...options, nodeSize: e.target.value });\n        }} />\n        <b>Edge width</b>\n        <input type=\"range\" min=\"1\" max=\"10\" step=\".05\" value={options.linkWidth} onInput={(e) => {\n          setOptions({ ...options, linkWidth: e.target.value });\n        }} />\n        <b>Edge distance</b>\n        <input type=\"range\" min=\"1\" max=\"1000\" step=\"5\" value={options.linkDistance} onInput={(e) => {\n          setOptions({ ...options, linkDistance: e.target.value });\n        }} />\n      </FloatingPanel>\n      <FloatingPanel title=\"Algorithms\" top=\"1em\" right=\"1em\">\n        <div className=\"list\">\n          <Algorithm name=\"bfs\" args={[\"start\", \"goal\"]} nodes={graph.nodes} action={(start, goal) => {\n            if(G.getNode(graph, start) && G.getNode(graph, goal)) {\n              console.log(A.breadthFirstSearch(start, goal, A.getAdjacencyList(graph)));\n            }\n          }}></Algorithm>\n          <Algorithm name=\"dfs\" args={[\"start\", \"goal\"]} nodes={graph.nodes} action={(start, goal) => {\n            if(G.getNode(graph, start) && G.getNode(graph, goal)) {\n              console.log(A.depthFirstSearch(start, goal, A.getAdjacencyList(graph)));\n            }\n          }}></Algorithm>\n          <Algorithm name=\"uniformcost\" args={[\"start\", \"goal\"]} nodes={graph.nodes}></Algorithm>\n          <Algorithm name=\"greedy\" args={[\"start\", \"goal\"]} nodes={graph.nodes}></Algorithm>\n          <Algorithm name=\"astar\" args={[\"start\", \"goal\"]} nodes={graph.nodes}></Algorithm>\n        </div>\n      </FloatingPanel>\n      <GraphDisplay nodes={graph.nodes} links={graph.links}\n        nodeSize={options.nodeSize}\n        linkWidth={options.linkWidth}\n        linkDistance={options.linkDistance}\n        onClickNode={(d) => {\n          if (nodeRefs.current[d.id]) {\n            nodeRefs.current[d.id].focus();\n            nodeRefs.current[d.id].select();\n            nodeRefs.current[d.id].scrollIntoView();\n          }\n          d.fixed = !d.fixed;\n          if (d.fixed) {\n            d.fx = d.x;\n            d.fy = d.y;\n          } else {\n            d.fx = null;\n            d.fy = null;\n          }\n        }}\n      />\n    </div >\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}