{"version":3,"sources":["components/GraphDisplay.js","components/NodeEditor.js","components/LinkEditor.js","components/Link.js","components/Algorithm.js","util/graph.js","components/FloatingPanel.js","util/algorithms.js","App.js","reportWebVitals.js","index.js"],"names":["GraphDisplay","_ref","nodes","links","onClickNode","nodeSize","linkWidth","linkDistance","_ref$visits","visits","_ref$path","path","_ref$start","start","_ref$goal","goal","display","useRef","force","boundX","x","container","current","getBoundingClientRect","Math","max","min","width","boundY","y","height","useEffect","d3","strength","id","d","alphaDecay","svg","on","selectAll","attr","source","target","resize","alpha","restart","window","addEventListener","node","data","exit","transition","ease","style","duration","remove","g","enter","append","concat","call","event","active","alphaTarget","fx","fy","fixed","merge","select","text","v","link","sourceId","targetId","insert","distance","e","classed","forEach","prev","react_default","a","createElement","ref","markerWidth","markerHeight","refX","refY","orient","points","NodeEditor","change","action","enterAction","value","icon","inputRef","className","placeholder","type","onKeyDown","key","onChange","index_es","fixedWidth","onClick","LinkEditor","sourceRef","targetRef","defaultValue","disabled","hidden","map","i","faArrowRight","parseInt","Link","Algorithm","name","args","_useState","useState","_useState2","Object","slicedToArray","argValues","setArgs","arg","oldValues","newValues","toConsumableArray","j","apply","addNode","_len","arguments","length","Array","_key","objectSpread","n","getNode","find","contains","_step2","_iterator2","_createForOfIteratorHelper","s","done","err","f","addLink","_step3","_arguments","_iterator3","_loop","undefined","reduce","acc","cur","push","FloatingPanel","title","children","top","left","bottom","right","expand","toggleExpand","cjs_default","handle","faMinus","faPlus","getAdjacencyList","graph","list","example","G","App","setGraph","removeNode","old","_len2","_key2","_i","_id","filter","updateNode","_step","index","_iterator","removeEdge","l","nodeRefs","addNodeRef","_useState3","iterationSpeed","_useState4","options","setOptions","_useState5","_useState6","setDisabled","_useState7","_useState8","search","setSearch","startFrame","goalFrame","visitFrame","pathFrame","animateSearch","results","last","performance","now","timestamp","requestAnimationFrame","visiti","console","log","pathi","clearSearch","components_FloatingPanel","components_NodeEditor","focus","el","scrollIntoView","blur","faTimes","components_LinkEditor","addEdge","sourceV","targetV","components_Link","step","onInput","components_Algorithm","isNaN","adjacencyList","trace","Map","set","queue","currentNode","shift","algorithms_createForOfIteratorHelper","has","get","unshift","A","stack","pop","components_GraphDisplay","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e6cc00b8.chunk.js","sourcesContent":["import './GraphDisplay.css';\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nfunction GraphDisplay({ nodes, links, onClickNode, nodeSize, linkWidth, linkDistance, visits = [], path = [], start = null, goal = null }) {\n    const display = useRef(null);\n    const force = useRef(null);\n\n    // Bounding box\n    const boundX = (x) => {\n        let container = display.current.getBoundingClientRect();\n        return Math.max(Math.min(container.width, x), 0);\n    }\n    const boundY = (y) => {\n        let container = display.current.getBoundingClientRect();\n        return Math.max(Math.min(container.height, y), 0);\n    }\n\n    // Only runs once\n    useEffect(() => {\n        // Create force\n        force.current = d3.forceSimulation()\n            .force(\"gravity\", d3.forceManyBody())\n            .force(\"links\", d3.forceLink().strength(0.05).id((d) => d.id))\n            .force(\"centerX\", d3.forceX().strength(0.005))\n            .force(\"centerY\", d3.forceY().strength(0.005))\n            .alphaDecay(0);\n\n        // Svg reference\n        let svg = d3.select(display.current);\n\n        // Move nodes and links every tick\n        force.current.on(\"tick\", function () {\n            svg.selectAll(\"line\")\n                .attr(\"x1\", (d) => { return boundX(d.source.x); })\n                .attr(\"y1\", (d) => { return boundY(d.source.y); })\n                .attr(\"x2\", (d) => { return boundX(d.target.x); })\n                .attr(\"y2\", (d) => { return boundY(d.target.y); });\n\n            svg.selectAll(\".node\").attr(\"transform\", (d) => {\n                return \"translate(\" + boundX(d.x) + \",\" + boundY(d.y) + \")\";\n            });\n        });\n\n        // Recalculate centering forces on resize\n        const resize = () => {\n            let container = display.current.getBoundingClientRect();\n            force.current.force(\"centerX\").x(container.width / 2);\n            force.current.force(\"centerY\").y(container.height / 2);\n            force.current.alpha(1).restart();\n        }\n        window.addEventListener(\"resize\", () => {\n            resize();\n        });\n        resize();\n    }, []);\n\n    // Runs when nodes change\n    useEffect(() => {\n        // Svg reference\n        let svg = d3.select(display.current);\n\n        // Draw nodes\n        let node = svg.selectAll(\".node\").data(nodes, (d) => d.id);\n\n        // Animate removed nodes\n        node.exit().transition().ease(d3.easeExpOut).style(\"opacity\", 0).duration(500).remove();\n\n        // Create new nodes\n        let g = node.enter().append(\"g\")\n            .attr(\"class\", \"node\")\n            .attr(\"id\", (d) => `node-${d.id}`)\n            .call(d3.drag()\n                .on(\"start\", (event, d) => {\n                    if (!event.active) force.current.alphaTarget(0.3).restart();\n                    d.fx = d.x;\n                    d.fy = d.y;\n                })\n                .on(\"drag\", (event, d) => {\n                    d.fx = event.x;\n                    d.fy = event.y;\n                })\n                .on(\"end\", (event, d) => {\n                    if (!event.active) force.current.alphaTarget(0);\n                    if (!d.fixed) {\n                        d.fx = null;\n                        d.fy = null;\n                    }\n                }));\n\n        // Draw circle\n        g.append(\"circle\").attr(\"r\", nodeSize || 4);\n\n        // Draw text\n        g.append(\"text\")\n            .attr(\"dx\", \"1em\")\n            .attr(\"dy\", \".35em\")\n            .merge(node.select(\"text\"))\n            .text((d) => d.v);\n\n        // Reinitialize force\n        force.current.nodes(nodes);\n    }, [nodes]);\n\n    // Runs when links change\n    useEffect(() => {\n        // Svg reference\n        let svg = d3.select(display.current);\n\n        // Draw links\n        let link = svg.selectAll(\"line\").data(links, (d) => {\n            let sourceId = d.source.id != null ? d.source.id : d.source;\n            let targetId = d.target.id != null ? d.target.id : d.target;\n            return `${sourceId}-${targetId}`;\n        });\n\n        // Animate removed links\n        link.exit().transition().ease(d3.easeExpOut).style(\"opacity\", 0).duration(500).remove();\n\n        // Create new links\n        link.enter().insert(\"line\", \":first-child\")\n            .attr(\"stroke-width\", linkWidth || 2)\n            .attr(\"marker-end\", \"url(#arrow)\")\n            .attr(\"id\", (d) => {\n                let sourceId = d.source.id != null ? d.source.id : d.source;\n                let targetId = d.target.id != null ? d.target.id : d.target;\n                return `link-${sourceId}-${targetId}`;\n            });\n\n        // Reinitialize force\n        force.current.force(\"links\").links(links);\n    }, [links]);\n\n    // Visual options\n    useEffect(() => {\n        d3.select(display.current).selectAll(\".node\").select(\"circle\").attr(\"r\", nodeSize || 0);\n    }, [nodeSize]);\n    useEffect(() => {\n        d3.select(display.current).selectAll(\"line\").attr(\"stroke-width\", linkWidth || 0);\n    }, [linkWidth]);\n    useEffect(() => {\n        force.current.force(\"links\").distance(linkDistance || 0);\n    }, [linkDistance]);\n\n    // Runs when onClickNode changes\n    useEffect(() => {\n        d3.selectAll(\"g\").on(\"click\", (e, d) => {\n            onClickNode(d);\n        })\n    }, [onClickNode]);\n\n    // Animating pathfinding\n    useEffect(() => {\n        d3.selectAll(\".visited\").classed(\"visited\", false);\n        visits.forEach((id) => {\n            d3.select(`#node-${id}`).classed(\"visited\", true);\n        });\n    }, [visits]);\n    useEffect(() => {\n        d3.selectAll(\".path\").classed(\"path\", false);\n        d3.selectAll(\"line\").attr(\"marker-end\", \"url(#arrow)\");\n        let prev = null;\n        path.forEach((id) => {\n            d3.select(`#node-${id}`).classed(\"path\", \"true\");\n            if (prev != null) {\n                d3.select(`#link-${prev}-${id}`)\n                    .classed(\"path\", true)\n                    .attr(\"marker-end\", \"url(#path-arrow)\");\n            }\n            prev = id;\n        });\n    }, [path]);\n    useEffect(() => {\n        d3.select(\".start\").classed(\"start\", false).select(\"#start\")\n            .transition()\n            .ease(d3.easeExpOut)\n            .style(\"opacity\", 0)\n            .duration(500).remove();\n        if (start != null) {\n            d3.select(`#node-${start}`).classed(\"start\", true).append(\"text\")\n                .attr(\"dx\", \"-2em\")\n                .attr(\"dy\", \".35em\")\n                .style(\"transform\", \"scale(0, 0)\")\n                .transition().ease(d3.easeExpOut)\n                .style(\"transform\", \"scale(1, 1)\")\n                .duration(500)\n                .text(\"🏠\")\n                .attr(\"id\", \"start\");\n        }\n    }, [start]);\n    useEffect(() => {\n        d3.select(\".goal\").classed(\"goal\", false).select(\"#goal\")\n            .transition()\n            .ease(d3.easeExpOut)\n            .style(\"opacity\", 0)\n            .duration(500).remove();\n        if (goal != null) {\n            d3.select(`#node-${goal}`).classed(\"goal\", true).append(\"text\")\n                .attr(\"dx\", \"-2em\")\n                .attr(\"dy\", \".35em\")\n                .style(\"transform\", \"scale(0, 0)\")\n                .transition().ease(d3.easeExpOut)\n                .style(\"transform\", \"scale(1, 1)\")\n                .duration(500)\n                .text(\"🏳️\")\n                .attr(\"id\", \"goal\");\n        }\n    }, [goal]);\n    return (\n        <svg ref={display} width=\"100%\" height=\"100%\">\n            <defs>\n                <marker id=\"arrow\" markerWidth=\"4\" markerHeight=\"4\" refX=\"5\" refY=\"2\" orient=\"auto\">\n                    <polygon points={\"0 0, 4 2, 0 4\"} />\n                </marker>\n                <marker id=\"path-arrow\" markerWidth=\"4\" markerHeight=\"4\" refX=\"5\" refY=\"2\" orient=\"auto\">\n                    <polygon points={\"0 0, 4 2, 0 4\"} />\n                </marker>\n            </defs>\n        </svg>\n    );\n}\nexport default GraphDisplay;","import './NodeEditor.css';\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nfunction NodeEditor({ change, action, enterAction, value, icon, inputRef }) {\n    const enter = (event) => {\n        if (event.key === 'Enter') {\n            enterAction ? enterAction && enterAction() : action && action();\n        }\n    }\n    return (\n        <div className=\"node\">\n            <input\n                placeholder=\"value\"\n                type=\"text\"\n                ref={inputRef}\n                value={value}\n                onKeyDown={enter}\n                onChange={change && ((e) => change(e.target.value))} />\n            <div className=\"action\"><FontAwesomeIcon icon={icon} fixedWidth onClick={() => action && action()} /></div>\n        </div>\n    );\n}\nexport default NodeEditor;","import './LinkEditor.css';\nimport React, { useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\n\nfunction LinkEditor({ action, icon, nodes }) {\n    const sourceRef = useRef();\n    const targetRef = useRef();\n    return (\n        <div className=\"link\">\n            <select ref={sourceRef} className=\"link\"\n                defaultValue=\"source\">\n                <option disabled hidden>source</option>\n                {nodes && nodes.map((node, i) => <option key={i} value={node.id}>{node.v}</option>)}\n            </select>\n            <FontAwesomeIcon icon={faArrowRight} fixedWidth />\n            <select ref={targetRef} className=\"link\"\n                defaultValue=\"target\">\n                <option disabled hidden>target</option>\n                {nodes && nodes.map((node, i) => <option key={i} value={node.id}>{node.v}</option>)}\n            </select>\n            <div className=\"action\"><FontAwesomeIcon icon={icon} fixedWidth\n                onClick={() => action && action(parseInt(sourceRef.current.value, 10), parseInt(targetRef.current.value, 10))} />\n            </div>\n        </div>\n    );\n}\nexport default LinkEditor;","import './Link.css';\nimport React, { useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\n\nfunction Link({ source, target, icon, action }) {\n    const sourceRef = useRef();\n    const targetRef = useRef();\n    return (\n        <div className=\"link\">\n            <div ref={sourceRef} className=\"link-value\">{source}</div>\n            <FontAwesomeIcon icon={faArrowRight} fixedWidth />\n            <div ref={targetRef} className=\"link-value\">{target}</div>\n            <div className=\"action\"><FontAwesomeIcon icon={icon} fixedWidth onClick={() => action()} />\n            </div>\n        </div>\n    );\n}\nexport default Link;","import './Algorithm.css';\nimport React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\n\nfunction Algorithm({ name, action, args, nodes }) {\n    const [argValues, setArgs] = useState(args.map(() => null));\n    return (\n        <code className=\"algorithm\">\n            {name}&nbsp;\n            {args.map((arg, i) => {\n                return (\n                    <select\n                        defaultValue={arg}\n                        key={i}\n                        onChange={(e) => {\n                            setArgs((oldValues) => {\n                                let newValues = [...oldValues];\n                                newValues[i] = e.target.value;\n                                return newValues;\n                            });\n                        }}>\n                        <option disabled hidden>{arg}</option>\n                        {nodes && nodes.map((node, j) => <option key={j} value={node.id}>{node.v}</option>)}\n                    </select>\n                );\n            })}\n            <div className=\"action\"><FontAwesomeIcon icon={faArrowRight} fixedWidth onClick={() => action && action(...argValues.map((value) => parseInt(value, 10)))} /></div>\n        </code>\n    );\n}\nexport default Algorithm;","/**\n* Creates a new graph object\n* @return {Object} A new graph\n*/\nexport function create() {\n    // Return a new graph with no nodes or links\n    return { nodes: [], links: [], id: 0, n: 0 };\n}\n/**\n* Add a node to a graph\n* @param  {Object} g     The graph\n* @param  {...any} value The value for the new node\n* @return {Object}       A new graph containing the new node\n*/\nexport function addNode(g, ...value) {\n    // Create new nodes for each value\n    let id = g.id;\n    let nodes = value.map((v) => { return { v: v, id: id++ } });\n\n    // Return a new graph with the new nodes in g.nodes\n    return { ...g, nodes: [...g.nodes, ...nodes], id, n: g.n + nodes.length };\n}\n/**\n* Returns the node with a certain id\n* @param  {Object} g  The graph\n* @param  {number} id The id of the node\n* @return {any}       The node\n*/\nexport function getNode(g, id) {\n    return g.nodes.find((node) => node.id === id);\n}\n/**\n* Update a node's value\n* @param  {Object} g     The graph\n* @param  {number} id    The id of the node to be updated\n* @param  {...any} value The value for the node\n* @return {Object}       A new graph containing the updated node\n*/\nexport function updateNode(g, id, value) {\n    let nodes = [...g.nodes];\n    let index = 0;\n    for (let node of nodes) {\n        if (node.id === id) {\n            index = node.index;\n            break;\n        }\n    }\n    nodes[index].v = value\n    return { ...g, nodes };\n}\n/**\n* Check whether or not a node with a given value exists in a graph\n* @param  {Object} g     The graph\n* @param  {...any} value The value\n* @return {boolean}      Whether or not the graph vontains a node with the given value\n*/\nexport function contains(g, value) {\n    let nodes = [...g.nodes];\n    for (let node of nodes) {\n        if (value === node.v) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n* Remove a node from a graph\n* @param  {Object} g     The graph\n* @param  {...number} id The id of the node to be removed\n* @return {Object}       A new graph that does not contain the node or any links with the node\n*/\nexport function removeNode(g, ...id) {\n    // Put ids in a map for constant lookup\n    let map = {}\n    for (const i of id)\n        map[i] = true;\n\n    // Remove the nodes from the nodes list\n    let nodes = g.nodes.filter((node) => !map[node.id]);\n\n    // Remove any links with the node\n    let links = g.links.filter((link) => !map[link.source.id] && !map[link.target.id] && !map[link.source] && !map[link.target]);\n\n    // Return a new graph with the updated node and link list\n    return { ...g, nodes, links, n: nodes.length };\n}\n/**\n* Add a link to a graph\n* @param  {Object} g       The graph\n* @param  {...number} link The source, target pair to be added\n* @return {Object}         A new graph containing a link between source and target\n*/\nexport function addLink(g, ...link) {\n    // Put ids in a map for constant lookup\n    let map = {}\n    for (const node of g.nodes) {\n        map[node.id] = true;\n    }\n\n    // Add valid links to a list\n    let links = []\n    for (let i = 1; i < link.length; i += 2) {\n        let source = link[i - 1];\n        let target = link[i];\n\n        // Check that the link is between two valid nodes\n        if (map[source] && map[target]) {\n            // Check that the link doesn't already exist\n            if (g.links.reduce((acc, cur) => {\n                return acc &&\n                    !(cur.source.id === source && cur.target.id === target) &&\n                    !(cur.source === source && cur.target === target);\n            }, true)) {\n                // Add the link to the list\n                links.push({ source, target });\n            }\n        }\n    }\n    // Return a new graph with the new links in g.links\n    return { ...g, links: [...g.links, ...links] };\n}\n/**\n* Remove a link from a graph\n* @param  {Object} g       The graph\n* @param  {...number} link The source, target pair to be removed\n* @return {Object}         A new graph that does not contain a link between source and target\n*/\nexport function removeLink(g, ...link) {\n    // Put all links in a map for constant lookup\n    let map = {};\n    for (let i = 1; i < link.length; i += 2) {\n        let source = link[i - 1];\n        let target = link[i];\n        if (!map[source])\n            map[source] = {};\n        map[source][target] = true;\n    }\n\n    // Remove all pre-existing links\n    let links = g.links.filter((l) =>\n        !(map[l.source.id] && map[l.source.id][l.target.id])\n        && !(map[l.source] && map[l.source][l.target])\n    );\n\n    // Return a new graph with the new links in g.links\n    return { ...g, links };\n}","import './FloatingPanel.css';\nimport React, { useState } from 'react';\nimport Draggable from 'react-draggable';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons';\n\nfunction FloatingPanel({ title, children, top, left, bottom, right, disabled }) {\n    const [expand, toggleExpand] = useState(true);\n    return (\n        <Draggable handle=\".floating-panel-title\">\n            <div className={`floating-panel ${expand ? \"floating-panel-max\" : \"floating-panel-min\"}`} style={{ top, left, bottom, right }}>\n                <div className=\"floating-panel-title\">\n                    <b>{title}</b>\n                    <div className=\"action\">\n                        <FontAwesomeIcon icon={expand ? faMinus : faPlus} fixedWidth onClick={() => {\n                            toggleExpand(!expand);\n                        }} />\n                    </div>\n                </div>\n                {expand ? <div className=\"floating-panel-content\" disabled={disabled || false}>\n                    {children}\n                </div> : null}\n            </div>\n        </Draggable >\n    );\n}\nexport default FloatingPanel;","/**\n* Return an adjacency list generated from a given graph\n* @param  {Object} g The graph\n* @return {Object}   The adjacency list representing the edges in the graph\n*/\nexport function getAdjacencyList(graph) {\n    let list = {};\n    graph.nodes.forEach((node) => {\n        list[node.id] = [];\n    });\n    graph.links.forEach((link) => {\n        let source = link.source.id != null ? link.source.id : link.source;\n        let target = link.target.id != null ? link.target.id : link.target;\n        list[source].push(target);\n    });\n    return list;\n}\n/**\n* Find a path between a start and goal node with breadth first search\n* @param  {number} start         The id of the starting node\n* @param  {number} goal          The id of the goal node\n* @param  {Object} adjacencyList The id of the node to be removed\n* @return {Object}               An object containing a list of expanded nodes in order and the final path\n*/\nexport function breadthFirstSearch(start, goal, adjacencyList) {\n    // A map between a node and the node it was reached from\n    let trace = new Map();\n    trace.set(start, null);\n\n    let queue = [start];\n\n    // The list of expanded nodes in order of expansion\n    let visits = [];\n\n    // The path\n    let path = [];\n\n    while (queue.length) {\n        // Take a node from the beginning of the queue\n        let currentNode = queue.shift();\n\n        // Add the node to the list of expanded nodes\n        visits.push(currentNode);\n        \n        // If this is the goal node stop searching\n        if (currentNode === goal) {\n            path.push(goal);\n            break;\n        }\n\n        // Expand the node\n        for (let target of adjacencyList[currentNode]) {\n            // Only add to the queue if the neighbor node has not been seen\n            if (!trace.has(target)) {\n                // Set the traceback of the neighbor node to the current node\n                trace.set(target, currentNode);\n                // Push the neighbor node to the queue\n                queue.push(target);\n            }\n        }\n    }\n\n    // Rebuild path backwards from the goal using trace\n    if (path.length) {\n        while (trace.get(path[0]) != null) {\n            // Add the parent node to the beginning of the path\n            path.unshift(trace.get(path[0]));\n        }\n    }\n\n    // Return a list of visits and a list representing the path found\n    return { visits, path, start, goal };\n}\n/**\n* Find a path between a start and goal node with depth first search\n* @param  {number} start         The id of the starting node\n* @param  {number} goal          The id of the goal node\n* @param  {Object} adjacencyList The id of the node to be removed\n* @return {Object}               An object containing a list of expanded nodes in order and the final path\n*/\nexport function depthFirstSearch(start, goal, adjacencyList) {\n    // A map between a node and the node it was reached from\n    let trace = new Map();\n    trace.set(start, null);\n\n    let stack = [start];\n\n    // The list of expanded nodes in order of expansion\n    let visits = [];\n\n    // The path\n    let path = [];\n\n    while (stack.length) {\n        // Take a node from the top of the stack\n        let currentNode = stack.pop();\n\n        // If this is the goal node stop searching\n        if (currentNode === goal) {\n            path.push(goal);\n            break;\n        }\n\n        // Add the node to the list of expanded nodes\n        visits.push(currentNode);\n\n        // Expand the node\n        for (let target of adjacencyList[currentNode]) {\n            // Only add to the stack if the neighbor node has not been seen\n            if (!trace.has(target)) {\n                // Set the traceback of the neighbor node to the current node\n                trace.set(target, currentNode);\n                // Push the neighbor node to the stack\n                stack.push(target);\n            }\n        }\n    }\n\n    // Rebuild path backwards from the goal using trace\n    if (path.length) {\n        while (trace.get(path[0]) != null) {\n            // Add the parent node to the beginning of the path\n            path.unshift(trace.get(path[0]));\n        }\n    }\n\n    // Return a list of visits and a list representing the path found\n    return { visits, path, start, goal };\n}","import './App.css';\nimport React, { useRef, useState } from 'react';\nimport GraphDisplay from './components/GraphDisplay';\nimport NodeEditor from './components/NodeEditor';\nimport LinkEditor from './components/LinkEditor';\nimport Link from './components/Link';\nimport Algorithm from './components/Algorithm';\nimport * as G from './util/graph';\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons'\nimport FloatingPanel from './components/FloatingPanel';\nimport * as A from './util/algorithms';\n\nconst example = G.addLink(G.addNode(G.create(), 0, 1, 2, 3, 4, 5, 6, 7, 8), 0, 1, 0, 2, 2, 4, 2, 6, 1, 3, 1, 5, 3, 7, 4, 8);\n\nfunction App() {\n  const [graph, setGraph] = useState(example);\n\n  const addNode = () => {\n    let value = addNodeRef.current.value;\n    if (value === \"\" || G.contains(graph, value)) {\n      console.log(\"Must be a new value\");\n    } else {\n      setGraph((old) => G.addNode(old, value));\n      addNodeRef.current.value = \"\";\n    }\n    addNodeRef.current.focus();\n  }\n\n  const removeNode = (id) => {\n    setGraph((old) => G.removeNode(old, id))\n  }\n\n  const updateNode = (id, v) => {\n    G.contains(graph, v) ?\n      setGraph((old) => { return { ...old } })\n      :\n      setGraph((old) => G.updateNode(old, id, v));\n  }\n\n  const addEdge = (source, target) => {\n    setGraph((old) => G.addLink(old, source, target));\n  }\n\n  const removeEdge = (source, target) => {\n    setGraph((old) => G.removeLink(old, source, target));\n  }\n\n  const nodeRefs = useRef({});\n  const addNodeRef = useRef();\n  const [options, setOptions] = useState({ nodeSize: 4, linkWidth: 2, linkDistance: 1, iterationSpeed: 500 });\n  const [disabled, setDisabled] = useState(false);\n\n  const [search, setSearch] = useState({ visits: [], path: [], start: null, goal: null });\n  let startFrame = useRef();\n  let goalFrame = useRef();\n  let visitFrame = useRef();\n  let pathFrame = useRef();\n\n  const animateSearch = (results) => {\n    setDisabled(true);\n\n    let last = performance.now();\n\n    let start = results.start;\n    startFrame.current = (timestamp) => {\n      if (timestamp - last > 2000 - options.iterationSpeed) {\n        last = timestamp;\n        setSearch((old) => { return { ...old, start } });\n        requestAnimationFrame(goalFrame.current);\n      } else {\n        requestAnimationFrame(startFrame.current);\n      }\n    }\n\n    let goal = results.goal;\n    goalFrame.current = (timestamp) => {\n      if (timestamp - last > 2000 - options.iterationSpeed) {\n        last = timestamp;\n        setSearch((old) => { return { ...old, goal } });\n        requestAnimationFrame(visitFrame.current);\n      } else {\n        requestAnimationFrame(goalFrame.current);\n      }\n    }\n    \n    let visits = [];\n    let visiti = 0;\n    visitFrame.current = (timestamp) => {\n      console.log(options.iterationSpeed);\n      if (timestamp - last > 2000 - options.iterationSpeed) {\n        last = timestamp;\n        if (visiti < results.visits.length) {\n          visits.push(results.visits[visiti++]);\n          setSearch((old) => { return { ...old, visits: [...visits] } });\n          requestAnimationFrame(visitFrame.current);\n        } else {\n          requestAnimationFrame(pathFrame.current);\n        }\n      } else {\n        requestAnimationFrame(visitFrame.current);\n      }\n    }\n\n    let path = [];\n    let pathi = 0;\n    pathFrame.current = (timestamp) => {\n      if (timestamp - last > (2000 - options.iterationSpeed) / 2) {\n        last = timestamp;\n        if (pathi < results.path.length) {\n          path.push(results.path[pathi++]);\n          setSearch((old) => { return { ...old, path: [...path] } });\n          requestAnimationFrame(pathFrame.current);\n        } else {\n          setDisabled(false);\n        }\n      } else {\n        requestAnimationFrame(pathFrame.current);\n      }\n    }\n    requestAnimationFrame(startFrame.current);\n  }\n\n  const clearSearch = () => {\n    setSearch({ visits: [], path: [], start: null, goal: null });\n  }\n\n  return (\n    <div className=\"App\">\n      <FloatingPanel title=\"Nodes\" top=\"1em\" left=\"1em\" disabled={disabled}>\n        <NodeEditor inputRef={addNodeRef}\n          action={() => {\n            clearSearch();\n            addNode();\n          }}\n          icon={faPlus} />\n        <hr />\n        <div className=\"list\">\n          {graph.nodes.map((node, i) => {\n            return (\n              <NodeEditor key={i} value={node.v} inputRef={(el) => (nodeRefs.current[node.id] = el)}\n                change={(v) => {\n                  clearSearch();\n                  updateNode(node.id, v);\n                }}\n                action={() => {\n                  clearSearch();\n                  removeNode(node.id);\n                }}\n                enterAction={() => {\n                  if (i + 1 < graph.nodes.length) {\n                    nodeRefs.current[graph.nodes[i + 1].id].focus();\n                    nodeRefs.current[graph.nodes[i + 1].id].select();\n                    nodeRefs.current[graph.nodes[i + 1].id].scrollIntoView();\n                  } else {\n                    nodeRefs.current[node.id].blur();\n                  }\n                }}\n                icon={faTimes} />\n            );\n          })}\n        </div>\n      </FloatingPanel>\n      <FloatingPanel title=\"Edges\" bottom=\"1em\" left=\"1em\" disabled={disabled}>\n        <LinkEditor nodes={graph.nodes}\n          icon={faPlus}\n          action={(source, target) => {\n            clearSearch();\n            addEdge(source, target);\n          }} />\n        <hr />\n        <div className=\"list\">\n          {graph.links.map((link, i) => {\n            let sourceId = link.source.id != null ? link.source.id : link.source;\n            let targetId = link.target.id != null ? link.target.id : link.target;\n            let sourceV = link.source.v != null ? link.source.v : G.getNode(graph, sourceId).v;\n            let targetV = link.target.v != null ? link.target.v : G.getNode(graph, targetId).v;\n            return (\n              <Link key={i}\n                source={sourceV}\n                target={targetV}\n                action={() => {\n                  clearSearch();\n                  removeEdge(sourceId, targetId);\n                }}\n                icon={faTimes} />\n            );\n          })}\n        </div>\n      </FloatingPanel>\n      <FloatingPanel title=\"Options\" bottom=\"1em\" right=\"1em\">\n        <b>Node size</b>\n        <input type=\"range\" min=\"0\" max=\"20\" step=\".01\" value={options.nodeSize} onInput={(e) => {\n          setOptions({ ...options, nodeSize: e.target.value });\n        }} />\n        <b>Edge width</b>\n        <input type=\"range\" min=\"0\" max=\"10\" step=\".005\" value={options.linkWidth} onInput={(e) => {\n          setOptions({ ...options, linkWidth: e.target.value });\n        }} />\n        <b>Edge distance</b>\n        <input type=\"range\" min=\"0\" max=\"1000\" step=\"1\" value={options.linkDistance} onInput={(e) => {\n          setOptions({ ...options, linkDistance: e.target.value });\n        }} />\n        <b>Iteration Speed</b>\n        <input type=\"range\" min=\"0\" max=\"2000\" step=\"2\" value={options.iterationSpeed} onInput={(e) => {\n          setOptions({ ...options, iterationSpeed: e.target.value });\n          console.log(options.iterationSpeed);\n        }} />\n      </FloatingPanel>\n      <FloatingPanel title=\"Algorithms\" top=\"1em\" right=\"1em\" disabled={disabled}>\n        <div className=\"list\">\n          <Algorithm name=\"bfs\" args={[\"start\", \"goal\"]} nodes={graph.nodes} action={(start, goal) => {\n            if (isNaN(start) || isNaN(goal)) return;\n            clearSearch();\n            animateSearch(A.breadthFirstSearch(start, goal, A.getAdjacencyList(graph)));\n          }}></Algorithm>\n          <Algorithm name=\"dfs\" args={[\"start\", \"goal\"]} nodes={graph.nodes} action={(start, goal) => {\n            if (isNaN(start) || isNaN(goal)) return;\n            clearSearch();\n            animateSearch(A.depthFirstSearch(start, goal, A.getAdjacencyList(graph)));\n          }}></Algorithm>\n          {/* <Algorithm name=\"uniformcost\" args={[\"start\", \"goal\"]} nodes={graph.nodes}></Algorithm>\n          <Algorithm name=\"greedy\" args={[\"start\", \"goal\"]} nodes={graph.nodes}></Algorithm>\n          <Algorithm name=\"astar\" args={[\"start\", \"goal\"]} nodes={graph.nodes}></Algorithm> */}\n        </div>\n      </FloatingPanel>\n      <GraphDisplay nodes={graph.nodes} links={graph.links}\n        nodeSize={options.nodeSize}\n        linkWidth={options.linkWidth}\n        linkDistance={options.linkDistance}\n        onClickNode={(d) => {\n          clearSearch();\n          if (nodeRefs.current[d.id]) {\n            nodeRefs.current[d.id].focus();\n            nodeRefs.current[d.id].select();\n            nodeRefs.current[d.id].scrollIntoView();\n          }\n          d.fixed = !d.fixed;\n          if (d.fixed) {\n            d.fx = d.x;\n            d.fy = d.y;\n          } else {\n            d.fx = null;\n            d.fy = null;\n          }\n        }}\n        visits={search.visits}\n        path={search.path}\n        start={search.start}\n        goal={search.goal}\n      />\n    </div >\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}