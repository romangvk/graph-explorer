{"version":3,"sources":["components/GraphDisplay.js","components/NodeEditor.js","components/LinkEditor.js","components/Link.js","components/Algorithm.js","util/graph.js","components/FloatingPanel.js","util/algorithms.js","App.js","reportWebVitals.js","index.js"],"names":["GraphDisplay","_ref","nodes","links","onClickNode","nodeSize","linkWidth","linkDistance","_ref$visits","visits","_ref$path","path","_ref$start","start","_ref$goal","goal","display","useRef","force","boundX","x","container","current","getBoundingClientRect","Math","max","min","width","boundY","y","height","useEffect","d3","strength","id","d","alphaDecay","svg","on","selectAll","attr","source","target","resize","alpha","restart","window","addEventListener","link","data","exit","transition","ease","style","duration","remove","enter","insert","concat","node","g","append","call","event","active","alphaTarget","fx","fy","fixed","merge","select","text","v","distance","e","classed","forEach","prev","react_default","a","createElement","ref","markerWidth","markerHeight","refX","refY","orient","points","NodeEditor","change","action","enterAction","value","icon","inputRef","className","placeholder","type","onKeyDown","key","onChange","index_es","fixedWidth","onClick","LinkEditor","sourceRef","targetRef","defaultValue","disabled","hidden","map","i","faArrowRight","parseInt","Link","Algorithm","name","args","_useState","useState","_useState2","Object","slicedToArray","argValues","setArgs","arg","oldValues","newValues","toConsumableArray","j","apply","addNode","_len","arguments","length","Array","_key","objectSpread","n","getNode","find","contains","_step2","_iterator2","_createForOfIteratorHelper","s","done","err","f","addLink","_step3","_arguments","_iterator3","_loop","undefined","reduce","acc","cur","push","FloatingPanel","title","children","top","left","bottom","right","expand","toggleExpand","cjs_default","handle","faMinus","faPlus","getAdjacencyList","graph","list","example","G","App","setGraph","removeNode","old","_len2","_key2","_i","_id","filter","updateNode","_step","index","_iterator","removeEdge","l","nodeRefs","addNodeRef","_useState3","iterationSpeed","_useState4","options","setOptions","clearSearch","setSearch","_useState5","_useState6","setDisabled","_useState7","_useState8","search","startFrame","goalFrame","visitFrame","pathFrame","animateSearch","results","last","performance","now","timestamp","requestAnimationFrame","visiti","console","log","pathi","components_FloatingPanel","components_NodeEditor","focus","el","scrollIntoView","blur","faTimes","components_LinkEditor","addEdge","sourceId","targetId","sourceV","targetV","components_Link","step","onInput","components_Algorithm","isNaN","adjacencyList","trace","Map","set","queue","currentNode","shift","algorithms_createForOfIteratorHelper","has","get","unshift","A","stack","pop","components_GraphDisplay","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.4c07ae06.chunk.js","sourcesContent":["import './GraphDisplay.css';\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nfunction GraphDisplay({ nodes, links, onClickNode, nodeSize, linkWidth, linkDistance, visits = [], path = [], start = null, goal = null }) {\n    const display = useRef(null);\n    const force = useRef(null);\n\n    // Bounding box\n    const boundX = (x) => {\n        let container = display.current.getBoundingClientRect();\n        return Math.max(Math.min(container.width, x), 0);\n    }\n    const boundY = (y) => {\n        let container = display.current.getBoundingClientRect();\n        return Math.max(Math.min(container.height, y), 0);\n    }\n\n    // Only runs once\n    useEffect(() => {\n        // Create force\n        force.current = d3.forceSimulation()\n            .force(\"gravity\", d3.forceManyBody())\n            .force(\"links\", d3.forceLink().strength(0.05).id((d) => d.id))\n            .force(\"centerX\", d3.forceX().strength(0.005))\n            .force(\"centerY\", d3.forceY().strength(0.005))\n            .alphaDecay(0);\n\n        // Svg reference\n        let svg = d3.select(display.current);\n\n        // Move nodes and links every tick\n        force.current.on(\"tick\", function () {\n            svg.selectAll(\"line\")\n                .attr(\"x1\", (d) => { return boundX(d.source.x); })\n                .attr(\"y1\", (d) => { return boundY(d.source.y); })\n                .attr(\"x2\", (d) => { return boundX(d.target.x); })\n                .attr(\"y2\", (d) => { return boundY(d.target.y); });\n\n            svg.selectAll(\".node\").attr(\"transform\", (d) => {\n                return \"translate(\" + boundX(d.x) + \",\" + boundY(d.y) + \")\";\n            });\n        });\n\n        // Recalculate centering forces on resize\n        const resize = () => {\n            let container = display.current.getBoundingClientRect();\n            force.current.force(\"centerX\").x(container.width / 2);\n            force.current.force(\"centerY\").y(container.height / 2);\n            force.current.alpha(1).restart();\n        }\n        window.addEventListener(\"resize\", () => {\n            resize();\n        });\n        resize();\n    }, []);\n\n    // Runs when nodes or links change\n    useEffect(() => {\n        // Svg reference\n        let svg = d3.select(display.current);\n\n        // Draw links\n        let link = svg.selectAll(\"line\").data(links, (d) => d.id);\n\n        // Animate removed links\n        link.exit().transition().ease(d3.easeExpOut).style(\"opacity\", 0).duration(500).remove();\n\n        // Create new links\n        link.enter().insert(\"line\", \":first-child\")\n            .attr(\"stroke-width\", linkWidth || 2)\n            .attr(\"marker-end\", \"url(#arrow)\")\n            .attr(\"id\", (d) => `link-${d.source.id != null ? d.source.id : d.source}-${d.target.id != null ? d.target.id : d.target}`);\n\n        // Draw nodes\n        let node = svg.selectAll(\".node\").data(nodes, (d) => d.id);\n\n        // Animate removed nodes\n        node.exit().transition().ease(d3.easeExpOut).style(\"opacity\", 0).duration(500).remove();\n\n        // Create new nodes\n        let g = node.enter().append(\"g\")\n            .attr(\"class\", \"node\")\n            .attr(\"id\", (d) => `node-${d.id}`)\n            .call(d3.drag()\n                .on(\"start\", (event, d) => {\n                    if (!event.active) force.current.alphaTarget(0.3).restart();\n                    d.fx = d.x;\n                    d.fy = d.y;\n                })\n                .on(\"drag\", (event, d) => {\n                    d.fx = event.x;\n                    d.fy = event.y;\n                })\n                .on(\"end\", (event, d) => {\n                    if (!event.active) force.current.alphaTarget(0);\n                    if (!d.fixed) {\n                        d.fx = null;\n                        d.fy = null;\n                    }\n                }));\n\n        // Draw circle\n        g.append(\"circle\").attr(\"r\", nodeSize || 4);\n\n        // Draw text\n        g.append(\"text\")\n            .attr(\"dx\", \"1em\")\n            .attr(\"dy\", \".35em\")\n            .merge(node.select(\"text\"))\n            .text((d) => d.v);\n\n        // Reinitialize force\n        force.current.nodes(nodes);\n        force.current.force(\"links\").links(links);\n    }, [nodes, links]);\n\n    // Visual options\n    useEffect(() => {\n        d3.select(display.current).selectAll(\".node\").select(\"circle\").attr(\"r\", nodeSize || 0);\n    }, [nodeSize]);\n    useEffect(() => {\n        d3.select(display.current).selectAll(\"line\").attr(\"stroke-width\", linkWidth || 0);\n    }, [linkWidth]);\n    useEffect(() => {\n        force.current.force(\"links\").distance(linkDistance || 0);\n    }, [linkDistance]);\n\n    // Runs when onClickNode changes\n    useEffect(() => {\n        d3.selectAll(\"g\").on(\"click\", (e, d) => {\n            onClickNode(d);\n        })\n    }, [onClickNode]);\n\n    // Animating pathfinding\n    useEffect(() => {\n        d3.selectAll(\".visited\").classed(\"visited\", false);\n        visits.forEach((id) => {\n            d3.select(`#node-${id}`).classed(\"visited\", true);\n        });\n    }, [visits]);\n    useEffect(() => {\n        d3.selectAll(\".path\").classed(\"path\", false);\n        d3.selectAll(\"line\").attr(\"marker-end\", \"url(#arrow)\");\n        let prev = null;\n        path.forEach((id) => {\n            d3.select(`#node-${id}`).classed(\"path\", \"true\");\n            if (prev != null) {\n                d3.select(`#link-${prev}-${id}`)\n                    .classed(\"path\", true)\n                    .attr(\"marker-end\", \"url(#path-arrow)\");\n            }\n            prev = id;\n        });\n    }, [path]);\n    useEffect(() => {\n        d3.select(\".start\").classed(\"start\", false).select(\"#start\")\n            .transition()\n            .ease(d3.easeExpOut)\n            .style(\"opacity\", 0)\n            .duration(500).remove();\n        if (start != null) {\n            d3.select(`#node-${start}`).classed(\"start\", true).append(\"text\")\n                .attr(\"dx\", \"-2em\")\n                .attr(\"dy\", \".35em\")\n                .style(\"transform\", \"scale(0, 0)\")\n                .transition().ease(d3.easeExpOut)\n                .style(\"transform\", \"scale(1, 1)\")\n                .duration(500)\n                .text(\"🏠\")\n                .attr(\"id\", \"start\");\n        }\n    }, [start]);\n    useEffect(() => {\n        d3.select(\".goal\").classed(\"goal\", false).select(\"#goal\")\n            .transition()\n            .ease(d3.easeExpOut)\n            .style(\"opacity\", 0)\n            .duration(500).remove();\n        if (goal != null) {\n            d3.select(`#node-${goal}`).classed(\"goal\", true).append(\"text\")\n                .attr(\"dx\", \"-2em\")\n                .attr(\"dy\", \".35em\")\n                .style(\"transform\", \"scale(0, 0)\")\n                .transition().ease(d3.easeExpOut)\n                .style(\"transform\", \"scale(1, 1)\")\n                .duration(500)\n                .text(\"🏳️\")\n                .attr(\"id\", \"goal\");\n        }\n    }, [goal]);\n    return (\n        <svg ref={display} width=\"100%\" height=\"100%\">\n            <defs>\n                <marker id=\"arrow\" markerWidth=\"4\" markerHeight=\"4\" refX=\"5\" refY=\"2\" orient=\"auto\">\n                    <polygon points={\"0 0, 4 2, 0 4\"} />\n                </marker>\n                <marker id=\"path-arrow\" markerWidth=\"4\" markerHeight=\"4\" refX=\"5\" refY=\"2\" orient=\"auto\">\n                    <polygon points={\"0 0, 4 2, 0 4\"} />\n                </marker>\n            </defs>\n        </svg>\n    );\n}\nexport default GraphDisplay;","import './NodeEditor.css';\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nfunction NodeEditor({ change, action, enterAction, value, icon, inputRef }) {\n    const enter = (event) => {\n        if (event.key === 'Enter') {\n            enterAction ? enterAction && enterAction() : action && action();\n        }\n    }\n    return (\n        <div className=\"node\">\n            <input\n                placeholder=\"value\"\n                type=\"text\"\n                ref={inputRef}\n                value={value}\n                onKeyDown={enter}\n                onChange={change && ((e) => change(e.target.value))} />\n            <div className=\"action\"><FontAwesomeIcon icon={icon} fixedWidth onClick={() => action && action()} /></div>\n        </div>\n    );\n}\nexport default NodeEditor;","import './LinkEditor.css';\nimport React, { useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\n\nfunction LinkEditor({ action, icon, nodes }) {\n    const sourceRef = useRef();\n    const targetRef = useRef();\n    return (\n        <div className=\"link\">\n            <select ref={sourceRef} className=\"link\"\n                defaultValue=\"source\">\n                <option disabled hidden>source</option>\n                {nodes && nodes.map((node, i) => <option key={i} value={node.id}>{node.v}</option>)}\n            </select>\n            <FontAwesomeIcon icon={faArrowRight} fixedWidth />\n            <select ref={targetRef} className=\"link\"\n                defaultValue=\"target\">\n                <option disabled hidden>target</option>\n                {nodes && nodes.map((node, i) => <option key={i} value={node.id}>{node.v}</option>)}\n            </select>\n            <div className=\"action\"><FontAwesomeIcon icon={icon} fixedWidth\n                onClick={() => action && action(parseInt(sourceRef.current.value, 10), parseInt(targetRef.current.value, 10))} />\n            </div>\n        </div>\n    );\n}\nexport default LinkEditor;","import './Link.css';\nimport React, { useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\n\nfunction Link({ source, target, icon, action }) {\n    const sourceRef = useRef();\n    const targetRef = useRef();\n    return (\n        <div className=\"link\">\n            <div ref={sourceRef} className=\"link-value\">{source}</div>\n            <FontAwesomeIcon icon={faArrowRight} fixedWidth />\n            <div ref={targetRef} className=\"link-value\">{target}</div>\n            <div className=\"action\"><FontAwesomeIcon icon={icon} fixedWidth onClick={() => action()} />\n            </div>\n        </div>\n    );\n}\nexport default Link;","import './Algorithm.css';\nimport React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\n\nfunction Algorithm({ name, action, args, nodes }) {\n    const [argValues, setArgs] = useState(args.map(() => null));\n    return (\n        <code className=\"algorithm\">\n            {name}&nbsp;\n            {args.map((arg, i) => {\n                return (\n                    <select\n                        defaultValue={arg}\n                        key={i}\n                        onChange={(e) => {\n                            setArgs((oldValues) => {\n                                let newValues = [...oldValues];\n                                newValues[i] = e.target.value;\n                                return newValues;\n                            });\n                        }}>\n                        <option disabled hidden>{arg}</option>\n                        {nodes && nodes.map((node, j) => <option key={j} value={node.id}>{node.v}</option>)}\n                    </select>\n                );\n            })}\n            <div className=\"action\"><FontAwesomeIcon icon={faArrowRight} fixedWidth onClick={() => action && action(...argValues.map((value) => parseInt(value, 10)))} /></div>\n        </code>\n    );\n}\nexport default Algorithm;","/**\n* Creates a new graph object\n* @return {Object} A new graph\n*/\nexport function create() {\n    // Return a new graph with no nodes or links\n    return { nodes: [], links: [], id: 0, n: 0 };\n}\n/**\n* Add a node to a graph\n* @param  {Object} g     The graph\n* @param  {...any} value The value for the new node\n* @return {Object}       A new graph containing the new node\n*/\nexport function addNode(g, ...value) {\n    // Create new nodes for each value\n    let id = g.id;\n    let nodes = value.map((v) => { return { v: v, id: id++ } });\n\n    // Return a new graph with the new nodes in g.nodes\n    return { ...g, nodes: [...g.nodes, ...nodes], id, n: g.n + nodes.length };\n}\n/**\n* Returns the node with a certain id\n* @param  {Object} g  The graph\n* @param  {number} id The id of the node\n* @return {any}       The node\n*/\nexport function getNode(g, id) {\n    return g.nodes.find((node) => node.id === id);\n}\n/**\n* Update a node's value\n* @param  {Object} g     The graph\n* @param  {number} id    The id of the node to be updated\n* @param  {...any} value The value for the node\n* @return {Object}       A new graph containing the updated node\n*/\nexport function updateNode(g, id, value) {\n    let nodes = [...g.nodes];\n    let index = 0;\n    for (let node of nodes) {\n        if (node.id === id) {\n            index = node.index;\n            break;\n        }\n    }\n    nodes[index].v = value\n    return { ...g, nodes };\n}\n/**\n* Check whether or not a node with a given value exists in a graph\n* @param  {Object} g     The graph\n* @param  {...any} value The value\n* @return {boolean}      Whether or not the graph vontains a node with the given value\n*/\nexport function contains(g, value) {\n    let nodes = [...g.nodes];\n    for (let node of nodes) {\n        if (value === node.v) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n* Remove a node from a graph\n* @param  {Object} g     The graph\n* @param  {...number} id The id of the node to be removed\n* @return {Object}       A new graph that does not contain the node or any links with the node\n*/\nexport function removeNode(g, ...id) {\n    // Put ids in a map for constant lookup\n    let map = {}\n    for (const i of id)\n        map[i] = true;\n\n    // Remove the nodes from the nodes list\n    let nodes = g.nodes.filter((node) => !map[node.id]);\n\n    // Remove any links with the node\n    let links = g.links.filter((link) => !map[link.source.id] && !map[link.target.id] && !map[link.source] && !map[link.target]);\n\n    // Return a new graph with the updated node and link list\n    return { ...g, nodes, links, n: nodes.length };\n}\n/**\n* Add a link to a graph\n* @param  {Object} g       The graph\n* @param  {...number} link The source, target pair to be added\n* @return {Object}         A new graph containing a link between source and target\n*/\nexport function addLink(g, ...link) {\n    // Put ids in a map for constant lookup\n    let map = {}\n    for (const node of g.nodes) {\n        map[node.id] = true;\n    }\n\n    // Add valid links to a list\n    let links = []\n    for (let i = 1; i < link.length; i += 2) {\n        let source = link[i - 1];\n        let target = link[i];\n\n        // Check that the link is between two valid nodes\n        if (map[source] && map[target]) {\n            // Check that the link doesn't already exist\n            if (g.links.reduce((acc, cur) => {\n                return acc &&\n                    !(cur.source.id === source && cur.target.id === target) &&\n                    !(cur.source === source && cur.target === target);\n            }, true)) {\n                // Add the link to the list\n                links.push({ source, target });\n            }\n        }\n    }\n    // Return a new graph with the new links in g.links\n    return { ...g, links: [...g.links, ...links] };\n}\n/**\n* Remove a link from a graph\n* @param  {Object} g       The graph\n* @param  {...number} link The source, target pair to be removed\n* @return {Object}         A new graph that does not contain a link between source and target\n*/\nexport function removeLink(g, ...link) {\n    // Put all links in a map for constant lookup\n    let map = {};\n    for (let i = 1; i < link.length; i += 2) {\n        let source = link[i - 1];\n        let target = link[i];\n        if (!map[source])\n            map[source] = {};\n        map[source][target] = true;\n    }\n\n    // Remove all pre-existing links\n    let links = g.links.filter((l) =>\n        !(map[l.source.id] && map[l.source.id][l.target.id])\n        && !(map[l.source] && map[l.source][l.target])\n    );\n\n    // Return a new graph with the new links in g.links\n    return { ...g, links };\n}","import './FloatingPanel.css';\nimport React, { useState } from 'react';\nimport Draggable from 'react-draggable';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons';\n\nfunction FloatingPanel({ title, children, top, left, bottom, right, disabled }) {\n    const [expand, toggleExpand] = useState(true);\n    return (\n        <Draggable handle=\".floating-panel-title\">\n            <div className={`floating-panel ${expand ? \"floating-panel-max\" : \"floating-panel-min\"}`} style={{ top, left, bottom, right }}>\n                <div className=\"floating-panel-title\">\n                    <b>{title}</b>\n                    <div className=\"action\">\n                        <FontAwesomeIcon icon={expand ? faMinus : faPlus} fixedWidth onClick={() => {\n                            toggleExpand(!expand);\n                        }} />\n                    </div>\n                </div>\n                {expand ? <div className=\"floating-panel-content\" disabled={disabled || false}>\n                    {children}\n                </div> : null}\n            </div>\n        </Draggable >\n    );\n}\nexport default FloatingPanel;","/**\n* Return an adjacency list generated from a given graph\n* @param  {Object} g The graph\n* @return {Object}   The adjacency list representing the edges in the graph\n*/\nexport function getAdjacencyList(graph) {\n    let list = {};\n    graph.nodes.forEach((node) => {\n        list[node.id] = [];\n    });\n    graph.links.forEach((link) => {\n        let source = link.source.id != null ? link.source.id : link.source;\n        let target = link.target.id != null ? link.target.id : link.target;\n        list[source].push(target);\n    });\n    return list;\n}\n/**\n* Find a path between a start and goal node with breadth first search\n* @param  {number} start         The id of the starting node\n* @param  {number} goal          The id of the goal node\n* @param  {Object} adjacencyList The id of the node to be removed\n* @return {Object}               An object containing a list of expanded nodes in order and the final path\n*/\nexport function breadthFirstSearch(start, goal, adjacencyList) {\n    // A map between a node and the node it was reached from\n    let trace = new Map();\n    trace.set(start, null);\n\n    let queue = [start];\n\n    // The list of expanded nodes in order of expansion\n    let visits = [];\n\n    // The path\n    let path = [];\n\n    while (queue.length) {\n        // Take a node from the beginning of the queue\n        let currentNode = queue.shift();\n\n        // Add the node to the list of expanded nodes\n        visits.push(currentNode);\n        \n        // If this is the goal node stop searching\n        if (currentNode === goal) {\n            path.push(goal);\n            break;\n        }\n\n        // Expand the node\n        for (let target of adjacencyList[currentNode]) {\n            // Only add to the queue if the neighbor node has not been seen\n            if (!trace.has(target)) {\n                // Set the traceback of the neighbor node to the current node\n                trace.set(target, currentNode);\n                // Push the neighbor node to the queue\n                queue.push(target);\n            }\n        }\n    }\n\n    // Rebuild path backwards from the goal using trace\n    if (path.length) {\n        while (trace.get(path[0]) != null) {\n            // Add the parent node to the beginning of the path\n            path.unshift(trace.get(path[0]));\n        }\n    }\n\n    // Return a list of visits and a list representing the path found\n    return { visits, path, start, goal };\n}\n/**\n* Find a path between a start and goal node with depth first search\n* @param  {number} start         The id of the starting node\n* @param  {number} goal          The id of the goal node\n* @param  {Object} adjacencyList The id of the node to be removed\n* @return {Object}               An object containing a list of expanded nodes in order and the final path\n*/\nexport function depthFirstSearch(start, goal, adjacencyList) {\n    // A map between a node and the node it was reached from\n    let trace = new Map();\n    trace.set(start, null);\n\n    let stack = [start];\n\n    // The list of expanded nodes in order of expansion\n    let visits = [];\n\n    // The path\n    let path = [];\n\n    while (stack.length) {\n        // Take a node from the top of the stack\n        let currentNode = stack.pop();\n\n        // If this is the goal node stop searching\n        if (currentNode === goal) {\n            path.push(goal);\n            break;\n        }\n\n        // Add the node to the list of expanded nodes\n        visits.push(currentNode);\n\n        // Expand the node\n        for (let target of adjacencyList[currentNode]) {\n            // Only add to the stack if the neighbor node has not been seen\n            if (!trace.has(target)) {\n                // Set the traceback of the neighbor node to the current node\n                trace.set(target, currentNode);\n                // Push the neighbor node to the stack\n                stack.push(target);\n            }\n        }\n    }\n\n    // Rebuild path backwards from the goal using trace\n    if (path.length) {\n        while (trace.get(path[0]) != null) {\n            // Add the parent node to the beginning of the path\n            path.unshift(trace.get(path[0]));\n        }\n    }\n\n    // Return a list of visits and a list representing the path found\n    return { visits, path, start, goal };\n}","import './App.css';\nimport React, { useRef, useState } from 'react';\nimport GraphDisplay from './components/GraphDisplay';\nimport NodeEditor from './components/NodeEditor';\nimport LinkEditor from './components/LinkEditor';\nimport Link from './components/Link';\nimport Algorithm from './components/Algorithm';\nimport * as G from './util/graph';\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons'\nimport FloatingPanel from './components/FloatingPanel';\nimport * as A from './util/algorithms';\n\nconst example = G.addLink(G.addNode(G.create(), 0, 1, 2, 3, 4, 5, 6, 7, 8), 0, 1, 0, 2, 2, 4, 2, 6, 1, 3, 1, 5, 3, 7, 4, 8);\n\nfunction App() {\n  const [graph, setGraph] = useState(example);\n  const addNode = () => {\n    let value = addNodeRef.current.value;\n    if (value === \"\" || G.contains(graph, value)) {\n      console.log(\"Must be a new value\");\n    } else {\n      setGraph((old) => G.addNode(old, value));\n      addNodeRef.current.value = \"\";\n    }\n    addNodeRef.current.focus();\n  }\n  const removeNode = (id) => {\n    setGraph((old) => G.removeNode(old, id))\n  }\n  const updateNode = (id, v) => {\n    G.contains(graph, v) ?\n      setGraph((old) => { return { ...old } })\n      :\n      setGraph((old) => G.updateNode(old, id, v));\n  }\n  const addEdge = (source, target) => {\n    setGraph((old) => G.addLink(old, source, target));\n  }\n  const removeEdge = (source, target) => {\n    setGraph((old) => G.removeLink(old, source, target));\n  }\n  const nodeRefs = useRef({});\n  const addNodeRef = useRef();\n  const [options, setOptions] = useState({ nodeSize: 4, linkWidth: 2, linkDistance: 1, iterationSpeed: 500 });\n  const clearSearch = () => {\n    setSearch({ visits: [], path: [], start: null, goal: null });\n  }\n  const [disabled, setDisabled] = useState(false);\n\n  const [search, setSearch] = useState({ visits: [], path: [], start: null, goal: null });\n  let startFrame = useRef();\n  let goalFrame = useRef();\n  let visitFrame = useRef();\n  let pathFrame = useRef();\n  const animateSearch = (results) => {\n    setDisabled(true);\n\n    let last = performance.now();\n\n    let start = results.start;\n    startFrame.current = (timestamp) => {\n      if (timestamp - last > 2000 - options.iterationSpeed) {\n        last = timestamp;\n        setSearch((old) => { return { ...old, start } });\n        requestAnimationFrame(goalFrame.current);\n      } else {\n        requestAnimationFrame(startFrame.current);\n      }\n    }\n    let goal = results.goal;\n    goalFrame.current = (timestamp) => {\n      if (timestamp - last > 2000 - options.iterationSpeed) {\n        last = timestamp;\n        setSearch((old) => { return { ...old, goal } });\n        requestAnimationFrame(visitFrame.current);\n      } else {\n        requestAnimationFrame(goalFrame.current);\n      }\n    }\n    let visits = [];\n    let visiti = 0;\n    visitFrame.current = (timestamp) => {\n      console.log(options.iterationSpeed);\n      if (timestamp - last > 2000 - options.iterationSpeed) {\n        last = timestamp;\n        if (visiti < results.visits.length) {\n          visits.push(results.visits[visiti++]);\n          setSearch((old) => { return { ...old, visits: [...visits] } });\n          requestAnimationFrame(visitFrame.current);\n        } else {\n          requestAnimationFrame(pathFrame.current);\n        }\n      } else {\n        requestAnimationFrame(visitFrame.current);\n      }\n    }\n    let path = [];\n    let pathi = 0;\n    pathFrame.current = (timestamp) => {\n      if (timestamp - last > (2000 - options.iterationSpeed) / 2) {\n        last = timestamp;\n        if (pathi < results.path.length) {\n          path.push(results.path[pathi++]);\n          setSearch((old) => { return { ...old, path: [...path] } });\n          requestAnimationFrame(pathFrame.current);\n        } else {\n          setDisabled(false);\n        }\n      } else {\n        requestAnimationFrame(pathFrame.current);\n      }\n    }\n    requestAnimationFrame(startFrame.current);\n  }\n\n  return (\n    <div className=\"App\">\n      <FloatingPanel title=\"Nodes\" top=\"1em\" left=\"1em\" disabled={disabled}>\n        <NodeEditor inputRef={addNodeRef}\n          action={() => {\n            clearSearch();\n            addNode();\n          }}\n          icon={faPlus} />\n        <hr />\n        <div className=\"list\">\n          {graph.nodes.map((node, i) => {\n            return (\n              <NodeEditor key={i} value={node.v} inputRef={(el) => (nodeRefs.current[node.id] = el)}\n                change={(v) => {\n                  clearSearch();\n                  updateNode(node.id, v);\n                }}\n                action={() => {\n                  clearSearch();\n                  removeNode(node.id);\n                }}\n                enterAction={() => {\n                  if (i + 1 < graph.nodes.length) {\n                    nodeRefs.current[graph.nodes[i + 1].id].focus();\n                    nodeRefs.current[graph.nodes[i + 1].id].select();\n                    nodeRefs.current[graph.nodes[i + 1].id].scrollIntoView();\n                  } else {\n                    nodeRefs.current[node.id].blur();\n                  }\n                }}\n                icon={faTimes} />\n            );\n          })}\n        </div>\n      </FloatingPanel>\n      <FloatingPanel title=\"Edges\" bottom=\"1em\" left=\"1em\" disabled={disabled}>\n        <LinkEditor nodes={graph.nodes}\n          icon={faPlus}\n          action={(source, target) => {\n            clearSearch();\n            addEdge(source, target);\n          }} />\n        <hr />\n        <div className=\"list\">\n          {graph.links.map((link, i) => {\n            let sourceId = link.source.id != null ? link.source.id : link.source;\n            let targetId = link.target.id != null ? link.target.id : link.target;\n            let sourceV = link.source.v != null ? link.source.v : G.getNode(graph, sourceId).v;\n            let targetV = link.target.v != null ? link.target.v : G.getNode(graph, targetId).v;\n            return (\n              <Link key={i}\n                source={sourceV}\n                target={targetV}\n                action={() => {\n                  clearSearch();\n                  removeEdge(sourceId, targetId);\n                }}\n                icon={faTimes} />\n            );\n          })}\n        </div>\n      </FloatingPanel>\n      <FloatingPanel title=\"Options\" bottom=\"1em\" right=\"1em\">\n        <b>Node size</b>\n        <input type=\"range\" min=\"0\" max=\"20\" step=\".01\" value={options.nodeSize} onInput={(e) => {\n          setOptions({ ...options, nodeSize: e.target.value });\n        }} />\n        <b>Edge width</b>\n        <input type=\"range\" min=\"0\" max=\"10\" step=\".005\" value={options.linkWidth} onInput={(e) => {\n          setOptions({ ...options, linkWidth: e.target.value });\n        }} />\n        <b>Edge distance</b>\n        <input type=\"range\" min=\"0\" max=\"1000\" step=\"1\" value={options.linkDistance} onInput={(e) => {\n          setOptions({ ...options, linkDistance: e.target.value });\n        }} />\n        <b>Iteration Speed</b>\n        <input type=\"range\" min=\"0\" max=\"2000\" step=\"2\" value={options.iterationSpeed} onInput={(e) => {\n          setOptions({ ...options, iterationSpeed: e.target.value });\n          console.log(options.iterationSpeed);\n        }} />\n      </FloatingPanel>\n      <FloatingPanel title=\"Algorithms\" top=\"1em\" right=\"1em\" disabled={disabled}>\n        <div className=\"list\">\n          <Algorithm name=\"bfs\" args={[\"start\", \"goal\"]} nodes={graph.nodes} action={(start, goal) => {\n            if (isNaN(start) || isNaN(goal)) return;\n            clearSearch();\n            animateSearch(A.breadthFirstSearch(start, goal, A.getAdjacencyList(graph)));\n          }}></Algorithm>\n          <Algorithm name=\"dfs\" args={[\"start\", \"goal\"]} nodes={graph.nodes} action={(start, goal) => {\n            if (isNaN(start) || isNaN(goal)) return;\n            clearSearch();\n            animateSearch(A.depthFirstSearch(start, goal, A.getAdjacencyList(graph)));\n          }}></Algorithm>\n          <Algorithm name=\"uniformcost\" args={[\"start\", \"goal\"]} nodes={graph.nodes}></Algorithm>\n          <Algorithm name=\"greedy\" args={[\"start\", \"goal\"]} nodes={graph.nodes}></Algorithm>\n          <Algorithm name=\"astar\" args={[\"start\", \"goal\"]} nodes={graph.nodes}></Algorithm>\n        </div>\n      </FloatingPanel>\n      <GraphDisplay nodes={graph.nodes} links={graph.links}\n        nodeSize={options.nodeSize}\n        linkWidth={options.linkWidth}\n        linkDistance={options.linkDistance}\n        onClickNode={(d) => {\n          clearSearch();\n          if (nodeRefs.current[d.id]) {\n            nodeRefs.current[d.id].focus();\n            nodeRefs.current[d.id].select();\n            nodeRefs.current[d.id].scrollIntoView();\n          }\n          d.fixed = !d.fixed;\n          if (d.fixed) {\n            d.fx = d.x;\n            d.fy = d.y;\n          } else {\n            d.fx = null;\n            d.fy = null;\n          }\n        }}\n        visits={search.visits}\n        path={search.path}\n        start={search.start}\n        goal={search.goal}\n      />\n    </div >\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}