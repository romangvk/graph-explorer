{"version":3,"sources":["components/GraphDisplay.js","components/NodeEditor.js","components/LinkEditor.js","util/graph.js","components/FloatingPanel.js","App.js","reportWebVitals.js","index.js"],"names":["radius","GraphDisplay","_ref","nodes","links","onClickNode","display","useRef","force","boundX","x","container","current","getBoundingClientRect","Math","max","min","width","boundY","y","height","useEffect","d3","strength","alphaDecay","svg","on","selectAll","attr","d","source","target","resize","alpha","restart","window","addEventListener","link","data","id","exit","transition","ease","style","duration","remove","enter","insert","node","g","append","call","event","active","alphaTarget","fx","fy","merge","select","text","v","e","react_default","a","createElement","ref","NodeEditor","change","action","enterAction","value","icon","inputRef","className","placeholder","type","onKeyDown","key","onChange","index_es","size","fixedWidth","onClick","faArrowRight","addNode","_len","arguments","length","Array","_key","map","Object","objectSpread","concat","toConsumableArray","n","contains","_step2","_iterator2","_createForOfIteratorHelper","s","done","err","f","FloatingPanel","title","children","_useState","useState","_useState2","slicedToArray","expand","toggleExpand","cjs_default","faMinus","faPlus","App","_step3","_arguments","_iterator3","_loop","i","undefined","reduce","acc","cur","push","G","graph","setGraph","nodeRefs","addNodeRef","_useState3","_useState4","addV","setAddV","components_FloatingPanel","components_NodeEditor","console","log","old","focus","el","_step","index","_iterator","_len2","_key2","_i","_id","filter","faTimes","components_LinkEditor","components_GraphDisplay","scrollIntoView","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.022858d6.chunk.js","sourcesContent":["import './GraphDisplay.css';\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nlet radius = 4;\n\nfunction GraphDisplay({ nodes, links, onClickNode }) {\n    const display = useRef(null);\n    const force = useRef(null);\n\n    // Bounding box\n    const boundX = (x) => {\n        let container = display.current.getBoundingClientRect();\n        return Math.max(Math.min(container.width - radius, x), 0 + radius);\n    }\n    const boundY = (y) => {\n        let container = display.current.getBoundingClientRect();\n        return Math.max(Math.min(container.height - radius, y), 0 + radius);\n    }\n\n    // Only runs once\n    useEffect(() => {\n        // Create force\n        force.current = d3.forceSimulation()\n            .force(\"gravity\", d3.forceManyBody())\n            .force(\"links\", d3.forceLink().strength(0.05))\n            .force(\"centerX\", d3.forceX().strength(0.005))\n            .force(\"centerY\", d3.forceY().strength(0.005))\n            .alphaDecay(0);\n\n        // Svg reference\n        let svg = d3.select(display.current);\n\n        // Move nodes and links every tick\n        force.current.on(\"tick\", function () {\n            svg.selectAll(\".link\")\n                .attr(\"x1\", (d) => { return boundX(d.source.x); })\n                .attr(\"y1\", (d) => { return boundY(d.source.y); })\n                .attr(\"x2\", (d) => { return boundX(d.target.x); })\n                .attr(\"y2\", (d) => { return boundY(d.target.y); });\n\n            svg.selectAll(\".node\").attr(\"transform\", (d) => {\n                return \"translate(\" + boundX(d.x) + \",\" + boundY(d.y) + \")\";\n            });\n        });\n\n        // Recalculate centering forces on resize\n        const resize = () => {\n            let container = display.current.getBoundingClientRect();\n            force.current.force(\"centerX\").x(container.width / 2);\n            force.current.force(\"centerY\").y(container.height / 2);\n            force.current.alpha(1).restart();\n        }\n        window.addEventListener(\"resize\", () => {\n            resize();\n        });\n        resize();\n    }, []);\n\n    // Runs when nodes or links change\n    useEffect(() => {\n        // Svg reference\n        let svg = d3.select(display.current);\n\n        // Draw links\n        let link = svg.selectAll(\".link\").data(links, (d) => d.id);\n\n        // Animate removed links\n        link.exit().transition().ease(d3.easeExpOut).style(\"opacity\", 0).duration(500).remove();\n\n        // Create new links\n        link.enter().insert(\"line\", \":first-child\").attr(\"class\", \"link\");\n\n        // Draw nodes\n        let node = svg.selectAll(\".node\").data(nodes, (d) => d.id);\n\n        // Animate removed nodes\n        node.exit().transition().ease(d3.easeExpOut).style(\"opacity\", 0).duration(500).remove();\n\n        // Create new nodes\n        let g = node.enter().append(\"g\")\n            .attr(\"class\", \"node\")\n            .call(d3.drag()\n                .on(\"start\", (event, d) => {\n                    if (!event.active) force.current.alphaTarget(0.3).restart();\n                    d.fx = d.x;\n                    d.fy = d.y;\n                })\n                .on(\"drag\", (event, d) => {\n                    d.fx = event.x;\n                    d.fy = event.y;\n                })\n                .on(\"end\", (event, d) => {\n                    if (!event.active) force.current.alphaTarget(0);\n                    d.fx = null;\n                    d.fy = null;\n                }));\n\n        // Draw circle\n        g.append(\"circle\").attr(\"r\", radius);\n\n        // Draw text\n        g.append(\"text\")\n            .attr(\"dx\", \"1em\")\n            .attr(\"dy\", \".35em\")\n            .merge(node.select(\"text\"))\n            .text((d) => d.v);\n\n        // Reinitialize force\n        force.current.nodes(nodes);\n        force.current.force(\"links\").links(links);\n    }, [nodes, links]);\n\n    // Runs when onClickNode changes\n    useEffect(() => {\n        d3.selectAll(\"g\").on(\"click\", (e, d) => {\n            onClickNode(d);\n        })\n    }, [onClickNode])\n    return (\n        <svg ref={display} width=\"100%\" height=\"100%\" />\n    );\n}\nexport default GraphDisplay;","import './NodeEditor.css';\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nfunction NodeEditor({ change, action, enterAction, value, icon, inputRef }) {\n    const enter = (event) => {\n        if (event.key === 'Enter') {\n            enterAction ? enterAction() : action();\n        }\n    }\n    return (\n        <div className=\"node\">\n            <input\n                placeholder=\"value\"\n                type=\"text\"\n                ref={inputRef}\n                value={value}\n                onKeyDown={enter}\n                onChange={(e) => change(e.target.value)} />\n            <div className=\"action\"><FontAwesomeIcon icon={icon} size=\"xs\" fixedWidth onClick={() => action()} /></div>\n        </div>\n    );\n}\nexport default NodeEditor;","import './LinkEditor.css';\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\n\nfunction NodeEditor({ change, action, enterAction, source, target, icon, inputRef }) {\n    const enter = (event) => {\n        if (event.key === 'Enter') {\n            enterAction ? enterAction() : action();\n        }\n    }\n    return (\n        <div className=\"link\">\n            <input\n                className=\"link\"\n                placeholder=\"source\"\n                type=\"text\"\n                ref={inputRef}\n                value={source}\n                onKeyDown={enter}\n                onChange={(e) => change(e.target.value)} />\n            <FontAwesomeIcon icon={faArrowRight} size=\"xs\" fixedWidth />\n            <input\n                className=\"link\"\n                placeholder=\"target\"\n                type=\"text\"\n                ref={inputRef}\n                value={target}\n                onKeyDown={enter}\n                onChange={(e) => change(e.target.value)} />\n            <div className=\"action\"><FontAwesomeIcon icon={icon} size=\"xs\" fixedWidth onClick={() => action()} /></div>\n        </div>\n    );\n}\nexport default NodeEditor;","/**\n* Creates a new graph object\n* @return {Object} A new graph\n*/\nexport function create() {\n    // Return a new graph with no nodes or links\n    return { nodes: [], links: [], id: 0, n: 0 };\n}\n/**\n* Add a node to a graph\n* @param  {Object} g     The graph\n* @param  {...any} value The value for the new node\n* @return {Object}       A new graph containing the new node\n*/\nexport function addNode(g, ...value) {\n    // Create new nodes for each value\n    let id = g.id;\n    let nodes = value.map((v) => { return { v: v, id: id++ } });\n\n    // Return a new graph with the new nodes in g.nodes\n    return { ...g, nodes: [...g.nodes, ...nodes], id, n: g.n + nodes.length };\n}\n\n/**\n* Update a node's value\n* @param  {Object} g     The graph\n* @param  {number} id    The id of the node to be updated\n* @param  {...any} value The value for the node\n* @return {Object}       A new graph containing the updated node\n*/\nexport function updateNode(g, id, value) {\n    let nodes = [...g.nodes];\n    let index = 0;\n    for (let node of nodes) {\n        if (node.id === id) {\n            index = node.index;\n            break;\n        }\n    }\n    nodes[index].v = value\n    return { ...g, nodes };\n}\n/**\n* Check whether or not a node with a given value exists in a graph\n* @param  {Object} g     The graph\n* @param  {...any} value The value\n* @return {boolean}      Whether or not the graph vontains a node with the given value\n*/\nexport function contains(g, value) {\n    let nodes = [...g.nodes];\n    for (let node of nodes) {\n        if (value === node.v) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n* Remove a node from a graph\n* @param  {Object} g     The graph\n* @param  {...number} id The id of the node to be removed\n* @return {Object}       A new graph that does not contain the node or any links with the node\n*/\nexport function removeNode(g, ...id) {\n    // Put ids in a map for constant lookup\n    let map = {}\n    for (const i of id)\n        map[i] = true;\n\n    // Remove the nodes from the nodes list\n    let nodes = g.nodes.filter((node) => !map[node.id]);\n\n    // Remove any links with the node\n    let links = g.links.filter((link) => !map[link.source.id] && !map[link.target.id] && !map[link.source] && !map[link.target]);\n\n    // Return a new graph with the updated node and link list\n    return { ...g, nodes, links, n: nodes.length };\n}\n/**\n* Add a link to a graph\n* @param  {Object} g       The graph\n* @param  {...number} link The source, target pair to be added\n* @return {Object}         A new graph containing a link between source and target\n*/\nexport function addLink(g, ...link) {\n    // Put ids in a map for constant lookup\n    let map = {}\n    for (const node of g.nodes) {\n        map[node.id] = true;\n    }\n\n    // Add valid links to a list\n    let links = []\n    for (let i = 1; i < link.length; i += 2) {\n        let source = link[i - 1];\n        let target = link[i];\n\n        // Check that the link is between two valid nodes\n        if (map[source] && map[target]) {\n            // Check that the link doesn't already exist\n            if (g.links.reduce((acc, cur) => {\n                return acc &&\n                    !(cur.source.id === source && cur.target.id === target) &&\n                    !(cur.source === source && cur.target === target);\n            }, true)) {\n                // Add the link to the list\n                links.push({ source, target });\n            }\n        }\n    }\n    // Return a new graph with the new links in g.links\n    return { ...g, links: [...g.links, ...links] };\n}\n/**\n* Remove a link from a graph\n* @param  {Object} g       The graph\n* @param  {...number} link The source, target pair to be removed\n* @return {Object}         A new graph that does not contain a link between source and target\n*/\nexport function removeLink(g, ...link) {\n    // Put all links in a map for constant lookup\n    let map = {};\n    for (let i = 1; i < link.length; i += 2) {\n        let source = link[i - 1];\n        let target = link[i];\n        if (!map[source])\n            map[source] = {};\n        map[source][target] = true;\n    }\n\n    // Remove all links\n    let links = g.links.filter((link) =>\n        !(map[link.source.id] && map[link.source.id][link.target.id])\n        && !(map[link.source] && map[link.source][link.target])\n    );\n\n    // Return a new graph with the new links in g.links\n    return { ...g, links };\n}","import './FloatingPanel.css';\nimport React, { useState } from 'react';\nimport Draggable from 'react-draggable';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons';\n\nfunction FloatingPanel({ title, children }) {\n    const [expand, toggleExpand] = useState(true);\n    return (\n        <Draggable>\n            <div className={`floating-panel ${expand ? \"floating-panel-max\" : \"floating-panel-min\"}`}>\n                <div className=\"floating-panel-title\">\n                    <b>{title}</b>\n                    <div className=\"action\">\n                        <FontAwesomeIcon icon={expand ? faMinus : faPlus} fixedWidth onClick={() => {\n                            toggleExpand(!expand);\n                        }} />\n                    </div>\n                </div>\n                {expand ? <div className=\"floating-panel-content\">\n                    {children}\n                </div> : null}\n            </div>\n        </Draggable>\n    );\n}\nexport default FloatingPanel;","import './App.css';\nimport React, { useRef, useState } from 'react';\nimport GraphDisplay from './components/GraphDisplay';\nimport NodeEditor from './components/NodeEditor';\nimport LinkEditor from './components/LinkEditor';\nimport * as G from './util/graph';\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons'\nimport FloatingPanel from './components/FloatingPanel';\n\nfunction App() {\n  const [graph, setGraph] = useState(G.addLink(G.addNode(G.create(), 0, 1, 2), 1, 2, 2, 0));\n  const nodeRefs = useRef({})\n  const addNodeRef = useRef();\n  const [addV, setAddV] = useState(\"\");\n\n  return (\n    <div className=\"App\">\n      <FloatingPanel title=\"Nodes\">\n        <NodeEditor value={addV} inputRef={addNodeRef}\n          change={(v) => setAddV(v)}\n          action={() => {\n            if (G.contains(graph, addV)) {\n              console.log(\"Must be a new value\");\n            } else {\n              setGraph((old) => G.addNode(old, addV));\n              setAddV(\"\");\n            }\n            addNodeRef.current.focus();\n          }}\n          icon={faPlus} />\n        <div className=\"list\">\n          {graph.nodes.map((node, i) => {\n            return (\n              <NodeEditor key={i} value={node.v} inputRef={(el) => (nodeRefs.current[node.id] = el)}\n                change={(v) => {\n                  G.contains(graph, v) ?\n                    setGraph((old) => { return { ...old } })\n                    :\n                    setGraph((old) => G.updateNode(old, node.id, v))\n                }}\n                action={() => setGraph((old) => G.removeNode(old, node.id))}\n                icon={faTimes} />\n            );\n          })}\n        </div>\n      </FloatingPanel>\n      <FloatingPanel title=\"Links\">\n        <div className=\"list\">\n          {graph.links.map((link, i) => {\n            return (\n              <LinkEditor key={i} source={link.source.v} target={link.target.v}\n                icon={faTimes} />\n            );\n          })}\n        </div>\n      </FloatingPanel>\n      <GraphDisplay nodes={graph.nodes} links={graph.links}\n        onClickNode={(d) => {\n          nodeRefs.current[d.id].focus();\n          nodeRefs.current[d.id].select();\n          nodeRefs.current[d.id].scrollIntoView();\n        }}\n      />\n    </div >\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}