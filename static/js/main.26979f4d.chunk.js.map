{"version":3,"sources":["components/GraphDisplay.js","components/NodeEditor.js","components/LinkEditor.js","components/Link.js","util/graph.js","components/FloatingPanel.js","App.js","reportWebVitals.js","index.js"],"names":["GraphDisplay","_ref","nodes","links","onClickNode","nodeSize","linkWidth","linkDistance","display","useRef","force","boundX","x","container","current","getBoundingClientRect","Math","max","min","width","boundY","y","height","useEffect","d3","strength","id","d","alphaDecay","svg","on","selectAll","attr","source","target","resize","alpha","restart","window","addEventListener","link","data","exit","transition","ease","style","duration","remove","enter","insert","node","g","append","call","event","active","alphaTarget","fx","fy","fixed","merge","select","text","v","distance","e","react_default","a","createElement","ref","NodeEditor","change","action","enterAction","value","icon","inputRef","className","placeholder","type","onKeyDown","key","onChange","index_es","fixedWidth","onClick","LinkEditor","sourceRef","targetRef","defaultValue","disabled","hidden","map","i","faArrowRight","parseInt","Link","addNode","_len","arguments","length","Array","_key","Object","objectSpread","concat","toConsumableArray","n","find","contains","_step2","_iterator2","_createForOfIteratorHelper","s","done","err","f","addLink","_step3","_arguments","_iterator3","_loop","undefined","reduce","acc","cur","push","FloatingPanel","title","children","top","left","bottom","right","_useState","useState","_useState2","slicedToArray","expand","toggleExpand","cjs_default","handle","faMinus","faPlus","App","G","graph","setGraph","nodeRefs","addNodeRef","_useState3","_useState4","options","setOptions","components_FloatingPanel","components_NodeEditor","console","log","old","focus","el","_step","index","_iterator","_len2","_key2","_i","_id","filter","scrollIntoView","blur","faTimes","components_LinkEditor","sourceId","targetId","sourceV","targetV","components_Link","step","onInput","components_GraphDisplay","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.26979f4d.chunk.js","sourcesContent":["import './GraphDisplay.css';\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nfunction GraphDisplay({ nodes, links, onClickNode, nodeSize, linkWidth, linkDistance }) {\n    const display = useRef(null);\n    const force = useRef(null);\n\n    // Bounding box\n    const boundX = (x) => {\n        let container = display.current.getBoundingClientRect();\n        return Math.max(Math.min(container.width, x), 0);\n    }\n    const boundY = (y) => {\n        let container = display.current.getBoundingClientRect();\n        return Math.max(Math.min(container.height, y), 0);\n    }\n\n    // Only runs once\n    useEffect(() => {\n        // Create force\n        force.current = d3.forceSimulation()\n            .force(\"gravity\", d3.forceManyBody())\n            .force(\"links\", d3.forceLink().strength(0.05).id((d) => d.id))\n            .force(\"centerX\", d3.forceX().strength(0.005))\n            .force(\"centerY\", d3.forceY().strength(0.005))\n            .alphaDecay(0);\n\n        // Svg reference\n        let svg = d3.select(display.current);\n\n        // Move nodes and links every tick\n        force.current.on(\"tick\", function () {\n            svg.selectAll(\".link\")\n                .attr(\"x1\", (d) => { return boundX(d.source.x); })\n                .attr(\"y1\", (d) => { return boundY(d.source.y); })\n                .attr(\"x2\", (d) => { return boundX(d.target.x); })\n                .attr(\"y2\", (d) => { return boundY(d.target.y); });\n\n            svg.selectAll(\".node\").attr(\"transform\", (d) => {\n                return \"translate(\" + boundX(d.x) + \",\" + boundY(d.y) + \")\";\n            });\n        });\n\n        // Recalculate centering forces on resize\n        const resize = () => {\n            let container = display.current.getBoundingClientRect();\n            force.current.force(\"centerX\").x(container.width / 2);\n            force.current.force(\"centerY\").y(container.height / 2);\n            force.current.alpha(1).restart();\n        }\n        window.addEventListener(\"resize\", () => {\n            resize();\n        });\n        resize();\n    }, []);\n\n    // Runs when nodes or links change\n    useEffect(() => {\n        // Svg reference\n        let svg = d3.select(display.current);\n\n        // Draw links\n        let link = svg.selectAll(\".link\").data(links, (d) => d.id);\n\n        // Animate removed links\n        link.exit().transition().ease(d3.easeExpOut).style(\"opacity\", 0).duration(500).remove();\n\n        // Create new links\n        link.enter().insert(\"line\", \":first-child\").attr(\"class\", \"link\").attr(\"stroke-width\", linkWidth || 2);\n\n        // Draw nodes\n        let node = svg.selectAll(\".node\").data(nodes, (d) => d.id);\n\n        // Animate removed nodes\n        node.exit().transition().ease(d3.easeExpOut).style(\"opacity\", 0).duration(500).remove();\n\n        // Create new nodes\n        let g = node.enter().append(\"g\")\n            .attr(\"class\", \"node\")\n            .call(d3.drag()\n                .on(\"start\", (event, d) => {\n                    if (!event.active) force.current.alphaTarget(0.3).restart();\n                    d.fx = d.x;\n                    d.fy = d.y;\n                })\n                .on(\"drag\", (event, d) => {\n                    d.fx = event.x;\n                    d.fy = event.y;\n                })\n                .on(\"end\", (event, d) => {\n                    if (!event.active) force.current.alphaTarget(0);\n                    if (!d.fixed) {\n                        d.fx = null;\n                        d.fy = null;\n                    }\n                }));\n\n        // Draw circle\n        g.append(\"circle\").attr(\"r\", nodeSize || 4);\n\n        // Draw text\n        g.append(\"text\")\n            .attr(\"dx\", \"1em\")\n            .attr(\"dy\", \".35em\")\n            .merge(node.select(\"text\"))\n            .text((d) => d.v);\n\n        // Reinitialize force\n        force.current.nodes(nodes);\n        force.current.force(\"links\").links(links);\n    }, [nodes, links]);\n\n    useEffect(() => {\n        d3.select(display.current).selectAll(\".node\").select(\"circle\").attr(\"r\", nodeSize || 4);\n    }, [nodeSize]);\n    useEffect(() => {\n        d3.select(display.current).selectAll(\".link\").attr(\"stroke-width\", linkWidth || 2);\n    }, [linkWidth]);\n    useEffect(() => {\n        force.current.force(\"links\").distance(linkDistance || 1);\n    }, [linkDistance]);\n\n    // Runs when onClickNode changes\n    useEffect(() => {\n        d3.selectAll(\"g\").on(\"click\", (e, d) => {\n            onClickNode(d);\n        })\n    }, [onClickNode])\n    return (\n        <svg ref={display} width=\"100%\" height=\"100%\" />\n    );\n}\nexport default GraphDisplay;","import './NodeEditor.css';\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nfunction NodeEditor({ change, action, enterAction, value, icon, inputRef }) {\n    const enter = (event) => {\n        if (event.key === 'Enter') {\n            enterAction ? enterAction() : action();\n        }\n    }\n    return (\n        <div className=\"node\">\n            <input\n                placeholder=\"value\"\n                type=\"text\"\n                ref={inputRef}\n                value={value}\n                onKeyDown={enter}\n                onChange={change ? (e) => change(e.target.value) : null} />\n            <div className=\"action\"><FontAwesomeIcon icon={icon} fixedWidth onClick={() => action()} /></div>\n        </div>\n    );\n}\nexport default NodeEditor;","import './LinkEditor.css';\nimport React, { useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\n\nfunction LinkEditor({ action, icon, nodes }) {\n    const sourceRef = useRef();\n    const targetRef = useRef();\n    return (\n        <div className=\"link\">\n            <select ref={sourceRef} className=\"link\"\n                defaultValue=\"source\">\n                <option disabled hidden>source</option>\n                {nodes && nodes.map((node, i) => <option key={i} value={node.id}>{node.v}</option>)}\n            </select>\n            <FontAwesomeIcon icon={faArrowRight} fixedWidth />\n            <select ref={targetRef} className=\"link\"\n                defaultValue=\"target\">\n                <option disabled hidden>target</option>\n                {nodes && nodes.map((node, i) => <option key={i} value={node.id}>{node.v}</option>)}\n            </select>\n            <div className=\"action\"><FontAwesomeIcon icon={icon} fixedWidth\n                onClick={() => action(parseInt(sourceRef.current.value, 10), parseInt(targetRef.current.value, 10))} />\n            </div>\n        </div>\n    );\n}\nexport default LinkEditor;","import './Link.css';\nimport React, { useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\n\nfunction Link({ source, target, icon, action }) {\n    const sourceRef = useRef();\n    const targetRef = useRef();\n    return (\n        <div className=\"link\">\n            <div ref={sourceRef} className=\"link-value\">{source}</div>\n            <FontAwesomeIcon icon={faArrowRight} fixedWidth />\n            <div ref={targetRef} className=\"link-value\">{target}</div>\n            <div className=\"action\"><FontAwesomeIcon icon={icon} fixedWidth onClick={() => action()} />\n            </div>\n        </div>\n    );\n}\nexport default Link;","/**\n* Creates a new graph object\n* @return {Object} A new graph\n*/\nexport function create() {\n    // Return a new graph with no nodes or links\n    return { nodes: [], links: [], id: 0, n: 0 };\n}\n/**\n* Add a node to a graph\n* @param  {Object} g     The graph\n* @param  {...any} value The value for the new node\n* @return {Object}       A new graph containing the new node\n*/\nexport function addNode(g, ...value) {\n    // Create new nodes for each value\n    let id = g.id;\n    let nodes = value.map((v) => { return { v: v, id: id++ } });\n\n    // Return a new graph with the new nodes in g.nodes\n    return { ...g, nodes: [...g.nodes, ...nodes], id, n: g.n + nodes.length };\n}\n/**\n* Get the value of a node with a certain id\n* @param  {Object} g     The graph\n* @param  {...any} value The value for the node\n* @return {any}       The value for the node\n*/\nexport function value(g, id) {\n    return g.nodes.find((node) => node.id === id).v;\n}\n/**\n* Update a node's value\n* @param  {Object} g     The graph\n* @param  {number} id    The id of the node to be updated\n* @param  {...any} value The value for the node\n* @return {Object}       A new graph containing the updated node\n*/\nexport function updateNode(g, id, value) {\n    let nodes = [...g.nodes];\n    let index = 0;\n    for (let node of nodes) {\n        if (node.id === id) {\n            index = node.index;\n            break;\n        }\n    }\n    nodes[index].v = value\n    return { ...g, nodes };\n}\n/**\n* Check whether or not a node with a given value exists in a graph\n* @param  {Object} g     The graph\n* @param  {...any} value The value\n* @return {boolean}      Whether or not the graph vontains a node with the given value\n*/\nexport function contains(g, value) {\n    let nodes = [...g.nodes];\n    for (let node of nodes) {\n        if (value === node.v) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n* Remove a node from a graph\n* @param  {Object} g     The graph\n* @param  {...number} id The id of the node to be removed\n* @return {Object}       A new graph that does not contain the node or any links with the node\n*/\nexport function removeNode(g, ...id) {\n    // Put ids in a map for constant lookup\n    let map = {}\n    for (const i of id)\n        map[i] = true;\n\n    // Remove the nodes from the nodes list\n    let nodes = g.nodes.filter((node) => !map[node.id]);\n\n    // Remove any links with the node\n    let links = g.links.filter((link) => !map[link.source.id] && !map[link.target.id] && !map[link.source] && !map[link.target]);\n\n    // Return a new graph with the updated node and link list\n    return { ...g, nodes, links, n: nodes.length };\n}\n/**\n* Add a link to a graph\n* @param  {Object} g       The graph\n* @param  {...number} link The source, target pair to be added\n* @return {Object}         A new graph containing a link between source and target\n*/\nexport function addLink(g, ...link) {\n    // Put ids in a map for constant lookup\n    let map = {}\n    for (const node of g.nodes) {\n        map[node.id] = true;\n    }\n\n    // Add valid links to a list\n    let links = []\n    for (let i = 1; i < link.length; i += 2) {\n        let source = link[i - 1];\n        let target = link[i];\n\n        // Check that the link is between two valid nodes\n        if (map[source] && map[target]) {\n            // Check that the link doesn't already exist\n            if (g.links.reduce((acc, cur) => {\n                return acc &&\n                    !(cur.source.id === source && cur.target.id === target) &&\n                    !(cur.source === source && cur.target === target);\n            }, true)) {\n                // Add the link to the list\n                links.push({ source, target });\n            }\n        }\n    }\n    // Return a new graph with the new links in g.links\n    return { ...g, links: [...g.links, ...links] };\n}\n/**\n* Remove a link from a graph\n* @param  {Object} g       The graph\n* @param  {...number} link The source, target pair to be removed\n* @return {Object}         A new graph that does not contain a link between source and target\n*/\nexport function removeLink(g, ...link) {\n    // Put all links in a map for constant lookup\n    let map = {};\n    for (let i = 1; i < link.length; i += 2) {\n        let source = link[i - 1];\n        let target = link[i];\n        if (!map[source])\n            map[source] = {};\n        map[source][target] = true;\n    }\n\n    // Remove all links\n    let links = g.links.filter((link) =>\n        !(map[link.source.id] && map[link.source.id][link.target.id])\n        && !(map[link.source] && map[link.source][link.target])\n    );\n\n    // Return a new graph with the new links in g.links\n    return { ...g, links };\n}","import './FloatingPanel.css';\nimport React, { useState } from 'react';\nimport Draggable from 'react-draggable';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons';\n\nfunction FloatingPanel({ title, children, top, left, bottom, right }) {\n    const [expand, toggleExpand] = useState(true);\n    return (\n        <Draggable handle=\".floating-panel-title\">\n            <div className={`floating-panel ${expand ? \"floating-panel-max\" : \"floating-panel-min\"}`} style={{ top, left, bottom, right }}>\n                <div className=\"floating-panel-title\">\n                    <b>{title}</b>\n                    <div className=\"action\">\n                        <FontAwesomeIcon icon={expand ? faMinus : faPlus} fixedWidth onClick={() => {\n                            toggleExpand(!expand);\n                        }} />\n                    </div>\n                </div>\n                {expand ? <div className=\"floating-panel-content\">\n                    {children}\n                </div> : null}\n            </div>\n        </Draggable>\n    );\n}\nexport default FloatingPanel;","import './App.css';\nimport React, { useRef, useState } from 'react';\nimport GraphDisplay from './components/GraphDisplay';\nimport NodeEditor from './components/NodeEditor';\nimport LinkEditor from './components/LinkEditor';\nimport Link from './components/Link';\nimport * as G from './util/graph';\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons'\nimport FloatingPanel from './components/FloatingPanel';\n\nfunction App() {\n  const [graph, setGraph] = useState(G.addLink(G.addNode(G.create(), 0, 1, 2), 1, 2, 2, 0));\n  const nodeRefs = useRef({})\n  const addNodeRef = useRef();\n  const [options, setOptions] = useState({ nodeSize: 4, linkWidth: 2, linkDistance: 1 })\n\n  return (\n    <div className=\"App\">\n      <FloatingPanel title=\"Nodes\" top=\"1em\" left=\"1em\">\n        <NodeEditor inputRef={addNodeRef}\n          action={() => {\n            let value = addNodeRef.current.value;\n            if (value === \"\" || G.contains(graph, value)) {\n              console.log(\"Must be a new value\");\n            } else {\n              setGraph((old) => G.addNode(old, value));\n              addNodeRef.current.value = \"\";\n            }\n            addNodeRef.current.focus();\n          }}\n          icon={faPlus} />\n        <hr />\n        <div className=\"list\">\n          {graph.nodes.map((node, i) => {\n            return (\n              <NodeEditor key={i} value={node.v} inputRef={(el) => (nodeRefs.current[node.id] = el)}\n                change={(v) => {\n                  G.contains(graph, v) ?\n                    setGraph((old) => { return { ...old } })\n                    :\n                    setGraph((old) => G.updateNode(old, node.id, v))\n                }}\n                action={() => setGraph((old) => G.removeNode(old, node.id))}\n                enterAction={() => {\n                  if (i + 1 < graph.nodes.length) {\n                    nodeRefs.current[graph.nodes[i + 1].id].focus();\n                    nodeRefs.current[graph.nodes[i + 1].id].select();\n                    nodeRefs.current[graph.nodes[i + 1].id].scrollIntoView();\n                  } else {\n                    nodeRefs.current[node.id].blur();\n                  }\n                }}\n                icon={faTimes} />\n            );\n          })}\n        </div>\n      </FloatingPanel>\n      <FloatingPanel title=\"Edges\" bottom=\"1em\" left=\"1em\">\n        <LinkEditor nodes={graph.nodes}\n          icon={faPlus}\n          action={(source, target) => {\n            setGraph((old) => G.addLink(old, source, target));\n          }} />\n        <hr />\n        <div className=\"list\">\n          {graph.links.map((link, i) => {\n            let sourceId = link.source.id != null ? link.source.id : link.source;\n            let targetId = link.target.id != null ? link.target.id : link.target;\n            let sourceV = link.source.v != null ? link.source.v : G.value(graph, sourceId);\n            let targetV = link.target.v != null ? link.target.v : G.value(graph, targetId);\n            return (\n              <Link key={i}\n                source={sourceV}\n                target={targetV}\n                action={() => { setGraph((old) => G.removeLink(old, sourceId, targetId)) }}\n                icon={faTimes} />\n            );\n          })}\n        </div>\n      </FloatingPanel>\n      <FloatingPanel title=\"Options\" bottom=\"1em\" right=\"1em\">\n        <b>Node size</b>\n        <input type=\"range\" min=\"1\" max=\"20\" step=\".1\" value={options.nodeSize} onInput={(e) => {\n          setOptions({ ...options, nodeSize: e.target.value });\n        }} />\n        <b>Edge width</b>\n        <input type=\"range\" min=\"1\" max=\"10\" step=\".05\" value={options.linkWidth} onInput={(e) => {\n          setOptions({ ...options, linkWidth: e.target.value });\n        }} />\n        <b>Edge distance</b>\n        <input type=\"range\" min=\"1\" max=\"1000\" step=\"5\" value={options.linkDistance} onInput={(e) => {\n          setOptions({ ...options, linkDistance: e.target.value });\n        }} />\n      </FloatingPanel>\n      <FloatingPanel title=\"Algorithms\" top=\"1em\" right=\"1em\">\n        <div className=\"list\">\n          <span>Breadth first search</span>\n          <span>Depth first search</span>\n          <span>Uniform cost search</span>\n          <span>Greedy search</span>\n          <span>A star search</span>\n        </div>\n      </FloatingPanel>\n      <GraphDisplay nodes={graph.nodes} links={graph.links}\n        nodeSize={options.nodeSize}\n        linkWidth={options.linkWidth}\n        linkDistance={options.linkDistance}\n        onClickNode={(d) => {\n          nodeRefs.current[d.id].focus();\n          nodeRefs.current[d.id].select();\n          nodeRefs.current[d.id].scrollIntoView();\n          d.fixed = !d.fixed;\n          if (d.fixed) {\n            d.fx = d.x;\n            d.fy = d.y;\n          } else {\n            d.fx = null;\n            d.fy = null;\n          }\n        }}\n      />\n    </div >\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}